[{
  "event": {
    "suiteId": "supposed-tests",
    "time": 416963739017.9,
    "type": "START",
    "plan": {
      "count": 106,
      "completed": 0,
      "batches": [
        {
          "batchId": "B3445501094",
          "theories": [
            {
              "id": "B3445501094",
              "assertions": [
                {
                  "id": "T234613271",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when a runner is configured to match a different working directory",
                    "it should find and run those tests"
                  ],
                  "behavior": "DefaultDiscoverer, when a runner is configured to match a different working directory, it should find and run those tests",
                  "skipped": false
                },
                {
                  "id": "T2979873516",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when a runner is configured to match a different working directory",
                    "the config that is returned should have the overrides"
                  ],
                  "behavior": "DefaultDiscoverer, when a runner is configured to match a different working directory, the config that is returned should have the overrides",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1499267160",
              "assertions": [
                {
                  "id": "T1762544061",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when a runner is configured to match a different naming convention, using a regular expression",
                    "it should find and run those tests"
                  ],
                  "behavior": "DefaultDiscoverer, when a runner is configured to match a different naming convention, using a regular expression, it should find and run those tests",
                  "skipped": false
                },
                {
                  "id": "T2111249353",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when a runner is configured to match a different naming convention, using a regular expression",
                    "the config that is returned should have the overrides"
                  ],
                  "behavior": "DefaultDiscoverer, when a runner is configured to match a different naming convention, using a regular expression, the config that is returned should have the overrides",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B4047296362",
              "assertions": [
                {
                  "id": "T2009783305",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when a runner is configured to match a different naming convention, using a test function",
                    "it should find and run those tests"
                  ],
                  "behavior": "DefaultDiscoverer, when a runner is configured to match a different naming convention, using a test function, it should find and run those tests",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1687685004",
              "assertions": [
                {
                  "id": "T872280371",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "it should inject the suite that is being run"
                  ],
                  "behavior": "DefaultDiscoverer, it should inject the suite that is being run",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2576357904",
              "assertions": [
                {
                  "id": "T3108099732",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when a runner is configured to ignore a directory, using a regular expression",
                    "it should not find tests that directory"
                  ],
                  "behavior": "DefaultDiscoverer, when a runner is configured to ignore a directory, using a regular expression, it should not find tests that directory",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B620042245",
              "assertions": [
                {
                  "id": "T272289404",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when a runner is configured to ignore a directory, using a test function",
                    "it should not find tests that directory"
                  ],
                  "behavior": "DefaultDiscoverer, when a runner is configured to ignore a directory, using a test function, it should not find tests that directory",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B637957585",
              "assertions": [
                {
                  "id": "T1935099767",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when a runner is configured to ignore a file path",
                    "it should not find tests that directory"
                  ],
                  "behavior": "DefaultDiscoverer, when a runner is configured to ignore a file path, it should not find tests that directory",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B4004465804",
              "assertions": [
                {
                  "id": "T3986766525",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when the runner executes a test that doesn't support injection",
                    "it should execute those files, but will not be able to report findings correctly"
                  ],
                  "behavior": "DefaultDiscoverer, when the runner executes a test that doesn't support injection, it should execute those files, but will not be able to report findings correctly",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2276411264",
              "assertions": [
                {
                  "id": "T1666834789",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when the runner executes a test that doesn't return a promise",
                    "it should execute those files, but will not be able to report findings correctly"
                  ],
                  "behavior": "DefaultDiscoverer, when the runner executes a test that doesn't return a promise, it should execute those files, but will not be able to report findings correctly",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B747281638",
              "assertions": [
                {
                  "id": "T3601344453",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "it should walk the tree",
                    "and find specs in any folder within the working directory, and the directories"
                  ],
                  "behavior": "DefaultDiscoverer, it should walk the tree, and find specs in any folder within the working directory, and the directories",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B1780998498",
          "theories": [
            {
              "id": "B1780998498",
              "assertions": [
                {
                  "id": "T3832517023",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with a timeout",
                    "it should use the configured timeout"
                  ],
                  "behavior": "Suite, when a new suite is created with a timeout, it should use the configured timeout",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1248606140",
              "assertions": [
                {
                  "id": "T3858743262",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with an assertion library",
                    "it should use the configured assertion library"
                  ],
                  "behavior": "Suite, when a new suite is created with an assertion library, it should use the configured assertion library",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3749209608",
              "assertions": [
                {
                  "id": "T833920087",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with a reporter name",
                    "it should use the configured reporter"
                  ],
                  "behavior": "Suite, when a new suite is created with a reporter name, it should use the configured reporter",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B587613541",
              "assertions": [
                {
                  "id": "T3574369160",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with a reporter name",
                    "# TODO and the reporter is unknown",
                    "it should use the default reporter"
                  ],
                  "behavior": "Suite, when a new suite is created with a reporter name, # TODO and the reporter is unknown, it should use the default reporter",
                  "skipped": true
                }
              ],
              "skipped": true
            },
            {
              "id": "B3001435077",
              "assertions": [
                {
                  "id": "T2339922183",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with multiple reporters",
                    "it should use all configured reporters"
                  ],
                  "behavior": "Suite, when a new suite is created with multiple reporters, it should use all configured reporters",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2586777907",
              "assertions": [
                {
                  "id": "T1305431340",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with a reporter (legacy: `{ report (event: ITestEvent): Promise<void> }`)",
                    "it should use the configured reporter"
                  ],
                  "behavior": "Suite, when a new suite is created with a reporter (legacy: `{ report (event: ITestEvent): Promise<void> }`), it should use the configured reporter",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2710306180",
              "assertions": [
                {
                  "id": "T2076592319",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with a reporter (`{ write (event: ITestEvent): Promise<void> }`)",
                    "it should use the configured reporter"
                  ],
                  "behavior": "Suite, when a new suite is created with a reporter (`{ write (event: ITestEvent): Promise<void> }`), it should use the configured reporter",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B991700520",
              "assertions": [
                {
                  "id": "T4198641560",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with a reporter (`(event: ITestEvent): Promise<void>`)",
                    "it should use the configured reporter"
                  ],
                  "behavior": "Suite, when a new suite is created with a reporter (`(event: ITestEvent): Promise<void>`), it should use the configured reporter",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1618940543",
              "assertions": [
                {
                  "id": "T3199713793",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with given and when synonyms",
                    "it should use the configured synonyms"
                  ],
                  "behavior": "Suite, when a new suite is created with given and when synonyms, it should use the configured synonyms",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3157662360",
              "assertions": [
                {
                  "id": "T2583312209",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with given and when synonyms",
                    "and the synonyms include empty strings",
                    "it should NOT use the configured synonyms"
                  ],
                  "behavior": "Suite, when a new suite is created with given and when synonyms, and the synonyms include empty strings, it should NOT use the configured synonyms",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B666408622",
              "assertions": [
                {
                  "id": "T3856250700",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with given and when synonyms",
                    "and the synonyms include non-strings",
                    "it should NOT use the configured synonyms"
                  ],
                  "behavior": "Suite, when a new suite is created with given and when synonyms, and the synonyms include non-strings, it should NOT use the configured synonyms",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B738634920",
          "theories": [
            {
              "id": "B738634920",
              "assertions": [
                {
                  "id": "T781209833",
                  "behaviors": [
                    "assertion styles",
                    "when the assertions don't curry",
                    "it should support one big func"
                  ],
                  "behavior": "assertion styles, when the assertions don't curry, it should support one big func",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1938315815",
              "assertions": [
                {
                  "id": "T1876945275",
                  "behaviors": [
                    "assertion styles",
                    "when the assertions curry",
                    "it should support currying"
                  ],
                  "behavior": "assertion styles, when the assertions curry, it should support currying",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2206470807",
              "assertions": [
                {
                  "id": "T234034953",
                  "behaviors": [
                    "assertion styles",
                    "when the assertions ignore the results of when",
                    "it should support just accepting the assertion library"
                  ],
                  "behavior": "assertion styles, when the assertions ignore the results of when, it should support just accepting the assertion library",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B642265724",
          "theories": [
            {
              "id": "B642265724",
              "assertions": [
                {
                  "id": "T4097946667",
                  "behaviors": [
                    "async tests",
                    "when given returns a promise",
                    "it should resolve the promise"
                  ],
                  "behavior": "async tests, when given returns a promise, it should resolve the promise",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2041676996",
              "assertions": [
                {
                  "id": "T3428553742",
                  "behaviors": [
                    "async tests",
                    "when given returns a value (not a promise)",
                    "it should resolve the value"
                  ],
                  "behavior": "async tests, when given returns a value (not a promise), it should resolve the value",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3016576560",
              "assertions": [
                {
                  "id": "T1948043456",
                  "behaviors": [
                    "async tests",
                    "when when returns a promise",
                    "it should resolve the promise"
                  ],
                  "behavior": "async tests, when when returns a promise, it should resolve the promise",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3783600124",
              "assertions": [
                {
                  "id": "T4055811011",
                  "behaviors": [
                    "async tests",
                    "when when returns a value (not a promise)",
                    "it should resolve the value"
                  ],
                  "behavior": "async tests, when when returns a value (not a promise), it should resolve the value",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1098551706",
              "assertions": [
                {
                  "id": "T2758195184",
                  "behaviors": [
                    "async tests",
                    "when an assertion returns a promise",
                    "it should run the asserion asynchronously"
                  ],
                  "behavior": "async tests, when an assertion returns a promise, it should run the asserion asynchronously",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1208658903",
              "assertions": [
                {
                  "id": "T286230725",
                  "behaviors": [
                    "async tests",
                    "when an assertion uses async await",
                    "it should run the asserion asynchronously"
                  ],
                  "behavior": "async tests, when an assertion uses async await, it should run the asserion asynchronously",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B4113453863",
          "theories": [
            {
              "id": "B4113453863",
              "assertions": [
                {
                  "id": "T1192774473",
                  "behaviors": [
                    "ava and tape compatibility",
                    "when a test is described, using the ava and tape syntax",
                    "it should run the tests"
                  ],
                  "behavior": "ava and tape compatibility, when a test is described, using the ava and tape syntax, it should run the tests",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3995410114",
              "assertions": [
                {
                  "id": "T1487094483",
                  "behaviors": [
                    "ava and tape compatibility",
                    "when a test is described, using the ava and tape syntax",
                    "and it does not have a description",
                    "it should run the tests"
                  ],
                  "behavior": "ava and tape compatibility, when a test is described, using the ava and tape syntax, and it does not have a description, it should run the tests",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B947630628",
              "assertions": [
                {
                  "id": "T1581490773",
                  "behaviors": [
                    "ava and tape compatibility",
                    "when multiple ava styles tests are added to an object",
                    "it should provide a way to group tests in a suite, with a single execution"
                  ],
                  "behavior": "ava and tape compatibility, when multiple ava styles tests are added to an object, it should provide a way to group tests in a suite, with a single execution",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B3754655697",
          "theories": [
            {
              "id": "B3754655697",
              "assertions": [
                {
                  "id": "T3746640873",
                  "behaviors": [
                    "given different styles",
                    "AAA",
                    "when arrange, act, and assert(s) exist",
                    "given should produce to when, which should produce to the assertions"
                  ],
                  "behavior": "given different styles, AAA, when arrange, act, and assert(s) exist, given should produce to when, which should produce to the assertions",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B4046180956",
              "assertions": [
                {
                  "id": "T2869232150",
                  "behaviors": [
                    "given different styles",
                    "AAA",
                    "when arrange, and assert(s) exist without act",
                    "`arrange` should be swapped out for `act`"
                  ],
                  "behavior": "given different styles, AAA, when arrange, and assert(s) exist without act, `arrange` should be swapped out for `act`",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3599733156",
              "assertions": [
                {
                  "id": "T3094947494",
                  "behaviors": [
                    "given different styles",
                    "BDD",
                    "when given, when, and then(s) exist",
                    "given should produce to when, which should produce to the assertions"
                  ],
                  "behavior": "given different styles, BDD, when given, when, and then(s) exist, given should produce to when, which should produce to the assertions",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3171417182",
              "assertions": [
                {
                  "id": "T2072171258",
                  "behaviors": [
                    "given different styles",
                    "BDD",
                    "when given, and then(s) exist without when",
                    "`given` should be swapped out for `when`"
                  ],
                  "behavior": "given different styles, BDD, when given, and then(s) exist without when, `given` should be swapped out for `when`",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1291623529",
              "assertions": [
                {
                  "id": "T3782690787",
                  "behaviors": [
                    "given different styles",
                    "vows",
                    "when topics are used for `when/act`",
                    "it should execute the topic"
                  ],
                  "behavior": "given different styles, vows, when topics are used for `when/act`, it should execute the topic",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B4254496363",
          "theories": [
            {
              "id": "B4254496363",
              "assertions": [
                {
                  "id": "T3183670899",
                  "behaviors": [
                    "chainability",
                    "when then is used as an `after` hook for tests (i.e. for cleanup)",
                    "it should run the after hook"
                  ],
                  "behavior": "chainability, when then is used as an `after` hook for tests (i.e. for cleanup), it should run the after hook",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3110062733",
              "assertions": [
                {
                  "id": "T2135440836",
                  "behaviors": [
                    "chainability",
                    "when then is used to run tests in a series",
                    "they should run in order"
                  ],
                  "behavior": "chainability, when then is used to run tests in a series, they should run in order",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B3547586930",
          "theories": [
            {
              "id": "B3547586930",
              "assertions": [
                {
                  "id": "T2283557910",
                  "behaviors": [
                    "test configuration",
                    "when a test sets a timeout",
                    "the test should be reported as BROKEN"
                  ],
                  "behavior": "test configuration, when a test sets a timeout, the test should be reported as BROKEN",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3247799586",
              "assertions": [
                {
                  "id": "T2439160698",
                  "behaviors": [
                    "test configuration",
                    "when a test sets a timeout",
                    "and another node overrides it",
                    "it should use the configured timeout"
                  ],
                  "behavior": "test configuration, when a test sets a timeout, and another node overrides it, it should use the configured timeout",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3123693836",
              "assertions": [
                {
                  "id": "T523737698",
                  "behaviors": [
                    "test configuration",
                    "when a test sets a timeout, with no description",
                    "the test should be reported as BROKEN"
                  ],
                  "behavior": "test configuration, when a test sets a timeout, with no description, the test should be reported as BROKEN",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2476209430",
              "assertions": [
                {
                  "id": "T3181904741",
                  "behaviors": [
                    "test configuration",
                    "when a test sets the assertion library",
                    "it should use the configured assertion library"
                  ],
                  "behavior": "test configuration, when a test sets the assertion library, it should use the configured assertion library",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B853865684",
          "theories": [
            {
              "id": "B853865684",
              "assertions": [
                {
                  "id": "T2615220919",
                  "behaviors": [
                    "assertion output",
                    "when an assertion passes, and returns an object with a `context` property",
                    "it should include the context in the event"
                  ],
                  "behavior": "assertion output, when an assertion passes, and returns an object with a `context` property, it should include the context in the event",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B753131583",
              "assertions": [
                {
                  "id": "T1282916600",
                  "behaviors": [
                    "assertion output",
                    "when an assertion passes, and returns a Promise with a `context` property",
                    "it should include the context in the event"
                  ],
                  "behavior": "assertion output, when an assertion passes, and returns a Promise with a `context` property, it should include the context in the event",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B2255567776",
          "theories": [
            {
              "id": "B2255567776",
              "assertions": [
                {
                  "id": "T3386406585",
                  "behaviors": [
                    "// when using supposed with mocha tests"
                  ],
                  "behavior": "when using supposed with mocha tests",
                  "skipped": true
                }
              ],
              "skipped": true
            }
          ]
        },
        {
          "batchId": "B1588313070",
          "theories": [
            {
              "id": "B1588313070",
              "assertions": [
                {
                  "id": "T2336706472",
                  "behaviors": [
                    "errors",
                    "when the `given` throws an error",
                    "it should bail out"
                  ],
                  "behavior": "errors, when the `given` throws an error, it should bail out",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1647302755",
              "assertions": [
                {
                  "id": "T482193410",
                  "behaviors": [
                    "errors",
                    "when the `when` throws an error",
                    "it should pass the error to the assertions"
                  ],
                  "behavior": "errors, when the `when` throws an error, it should pass the error to the assertions",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3434605673",
              "assertions": [
                {
                  "id": "T2547240914",
                  "behaviors": [
                    "errors",
                    "when the `given` rejects",
                    "it should bail out"
                  ],
                  "behavior": "errors, when the `given` rejects, it should bail out",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B4012798136",
              "assertions": [
                {
                  "id": "T3062352938",
                  "behaviors": [
                    "errors",
                    "when the `when` rejects",
                    "it should pass the error to the assertions"
                  ],
                  "behavior": "errors, when the `when` rejects, it should pass the error to the assertions",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2063895013",
              "assertions": [
                {
                  "id": "T1788022703",
                  "behaviors": [
                    "errors",
                    "when the assertion throws an error",
                    "the test should fail"
                  ],
                  "behavior": "errors, when the assertion throws an error, the test should fail",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B649031364",
              "assertions": [
                {
                  "id": "T1840921739",
                  "behaviors": [
                    "errors",
                    "when `given` is never resolved",
                    "the test should be reported as BROKEN"
                  ],
                  "behavior": "errors, when `given` is never resolved, the test should be reported as BROKEN",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3095591155",
              "assertions": [
                {
                  "id": "T3701701087",
                  "behaviors": [
                    "errors",
                    "when `when` is never resolved",
                    "the test should be reported as BROKEN"
                  ],
                  "behavior": "errors, when `when` is never resolved, the test should be reported as BROKEN",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B817700825",
              "assertions": [
                {
                  "id": "T2351029604",
                  "behaviors": [
                    "errors",
                    "when async assertions never return",
                    "the test should be reported as BROKEN"
                  ],
                  "behavior": "errors, when async assertions never return, the test should be reported as BROKEN",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B4174502233",
              "assertions": [
                {
                  "id": "T2074324936",
                  "behaviors": [
                    "errors",
                    "when promised assertions never return",
                    "the test should be reported as BROKEN"
                  ],
                  "behavior": "errors, when promised assertions never return, the test should be reported as BROKEN",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B3826980467",
          "theories": [
            {
              "id": "B3826980467",
              "assertions": [
                {
                  "id": "T496768875",
                  "behaviors": [
                    "supposed",
                    "when descriptions are deeply nested",
                    "it should run them all"
                  ],
                  "behavior": "supposed, when descriptions are deeply nested, it should run them all",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1173576165",
              "assertions": [
                {
                  "id": "T4101655569",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no when",
                    "and a parent description does have a when",
                    "it should use the parent when"
                  ],
                  "behavior": "supposed, when nested assertions have no when, and a parent description does have a when, it should use the parent when",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B4076317168",
              "assertions": [
                {
                  "id": "T4195653468",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no given",
                    "and a parent description does have a given",
                    "and the nest has a when",
                    "it should support branching the rabbit hole"
                  ],
                  "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest has a when, it should support branching the rabbit hole",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1931949118",
              "assertions": [
                {
                  "id": "T548857253",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no given",
                    "and a parent description does have a given",
                    "and the nest has a when",
                    "and there's more nesting",
                    "with when's but not given's",
                    "the when's should receive the value from the parent given"
                  ],
                  "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest has a when, and there's more nesting, with when's but not given's, the when's should receive the value from the parent given",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2334897915",
              "assertions": [
                {
                  "id": "T54769290",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no given",
                    "and a parent description does have a given",
                    "and the nest has a when",
                    "and there's more nesting",
                    "with when's and given's",
                    "the when's should receive the value from the overriding given"
                  ],
                  "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest has a when, and there's more nesting, with when's and given's, the when's should receive the value from the overriding given",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3062399233",
              "assertions": [
                {
                  "id": "T2582326040",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no given",
                    "and a parent description does have a given",
                    "and the nest has a when",
                    "and there's more nesting",
                    "with when's and given's",
                    "in deeper nests",
                    "the when's should receive the value from the overriding given"
                  ],
                  "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest has a when, and there's more nesting, with when's and given's, in deeper nests, the when's should receive the value from the overriding given",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1967741965",
              "assertions": [
                {
                  "id": "T647198938",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no given",
                    "and a parent description does have a given",
                    "and the nest does NOT have a when",
                    "the assertions should receive the value from the parent given"
                  ],
                  "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest does NOT have a when, the assertions should receive the value from the parent given",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2967556002",
              "assertions": [
                {
                  "id": "T3050652413",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no given",
                    "and a parent description does have a given",
                    "and the nest does NOT have a when",
                    "and there's more nesting",
                    "with neither when's nor given's",
                    "the assertions should receive the value from the parent given"
                  ],
                  "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest does NOT have a when, and there's more nesting, with neither when's nor given's, the assertions should receive the value from the parent given",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2744184832",
              "assertions": [
                {
                  "id": "T67986680",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no given",
                    "and a parent description does have a given",
                    "and the nest does NOT have a when",
                    "and there's more nesting",
                    "with a given, but not a when",
                    "the assertions should receive the value from the overriding given"
                  ],
                  "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest does NOT have a when, and there's more nesting, with a given, but not a when, the assertions should receive the value from the overriding given",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3062399233",
              "assertions": [
                {
                  "id": "T3994234473",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no given",
                    "and a parent description does have a given",
                    "and the nest does NOT have a when",
                    "and there's more nesting",
                    "with a given, but not a when",
                    "in deeper nests",
                    "the assertions should receive the value from the overriding given"
                  ],
                  "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest does NOT have a when, and there's more nesting, with a given, but not a when, in deeper nests, the assertions should receive the value from the overriding given",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3391635544",
              "assertions": [
                {
                  "id": "T1489044925",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have givens",
                    "and they stem from a parent with a when (1)",
                    "it should pass the child given to the parent when"
                  ],
                  "behavior": "supposed, when nested assertions have givens, and they stem from a parent with a when (1), it should pass the child given to the parent when",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1754119825",
              "assertions": [
                {
                  "id": "T3019135220",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have givens",
                    "and they stem from a parent with a when (42)",
                    "it should pass the child given to the parent when"
                  ],
                  "behavior": "supposed, when nested assertions have givens, and they stem from a parent with a when (42), it should pass the child given to the parent when",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1660635968",
              "assertions": [
                {
                  "id": "T3627335037",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have givens (make-batch if (!when && parentWhen && !whenIsInheritedGiven))",
                    "it should equal 84"
                  ],
                  "behavior": "supposed, when nested assertions have givens (make-batch if (!when && parentWhen && !whenIsInheritedGiven)), it should equal 84",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2605023908",
              "assertions": [
                {
                  "id": "T3508928479",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have givens (make-batch if (!when && parentWhen && !whenIsInheritedGiven))",
                    "and they stem from a parent with a when",
                    "it should equal 2"
                  ],
                  "behavior": "supposed, when nested assertions have givens (make-batch if (!when && parentWhen && !whenIsInheritedGiven)), and they stem from a parent with a when, it should equal 2",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B4214814236",
              "assertions": [
                {
                  "id": "T335109675",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have givens (make-batch if (!when && given))",
                    "it should equal 42"
                  ],
                  "behavior": "supposed, when nested assertions have givens (make-batch if (!when && given)), it should equal 42",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2605023908",
              "assertions": [
                {
                  "id": "T3699574721",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have givens (make-batch if (!when && given))",
                    "and they stem from a parent with a when",
                    "it should equal 1"
                  ],
                  "behavior": "supposed, when nested assertions have givens (make-batch if (!when && given)), and they stem from a parent with a when, it should equal 1",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2237625854",
              "assertions": [
                {
                  "id": "T643190769",
                  "behaviors": [
                    "supposed",
                    "when the `when` is asynchronous",
                    "it should not execute the assertions until the when is resolved"
                  ],
                  "behavior": "supposed, when the `when` is asynchronous, it should not execute the assertions until the when is resolved",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B922081056",
          "theories": [
            {
              "id": "B922081056",
              "assertions": [
                {
                  "id": "T411392620",
                  "behaviors": [
                    "assertion output",
                    "when an assertion passes, and returns an object with a `log` property",
                    "it should include the log in the event"
                  ],
                  "behavior": "assertion output, when an assertion passes, and returns an object with a `log` property, it should include the log in the event",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B962456471",
              "assertions": [
                {
                  "id": "T3705649512",
                  "behaviors": [
                    "assertion output",
                    "when an assertion passes, and returns a Promise with a `log` property",
                    "it should include the log in the event"
                  ],
                  "behavior": "assertion output, when an assertion passes, and returns a Promise with a `log` property, it should include the log in the event",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B1675426431",
          "theories": [
            {
              "id": "B1675426431",
              "assertions": [
                {
                  "id": "T754121129",
                  "behaviors": [
                    "missing when",
                    "when there is no when function",
                    "it should still execute the assertions"
                  ],
                  "behavior": "missing when, when there is no when function, it should still execute the assertions",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B2554623017",
          "theories": [
            {
              "id": "B2554623017",
              "assertions": [
                {
                  "id": "T206888825",
                  "behaviors": [
                    "skipping tests",
                    "when a behavior is skipped",
                    "it should NOT run the behavior"
                  ],
                  "behavior": "skipping tests, when a behavior is skipped, it should NOT run the behavior",
                  "skipped": false
                },
                {
                  "id": "T3410282755",
                  "behaviors": [
                    "skipping tests",
                    "when a behavior is skipped",
                    "it should NOT run any assertions"
                  ],
                  "behavior": "skipping tests, when a behavior is skipped, it should NOT run any assertions",
                  "skipped": false
                },
                {
                  "id": "T2221856548",
                  "behaviors": [
                    "skipping tests",
                    "when a behavior is skipped",
                    "it should count the assertions that were skipped"
                  ],
                  "behavior": "skipping tests, when a behavior is skipped, it should count the assertions that were skipped",
                  "skipped": false
                },
                {
                  "id": "T3722697963",
                  "behaviors": [
                    "skipping tests",
                    "when a behavior is skipped",
                    "it should produce outcomes with a status of SKIPPED"
                  ],
                  "behavior": "skipping tests, when a behavior is skipped, it should produce outcomes with a status of SKIPPED",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3045445995",
              "assertions": [
                {
                  "id": "T632654725",
                  "behaviors": [
                    "skipping tests",
                    "when a named behavior is skipped",
                    "it should NOT run the behavior"
                  ],
                  "behavior": "skipping tests, when a named behavior is skipped, it should NOT run the behavior",
                  "skipped": false
                },
                {
                  "id": "T242631415",
                  "behaviors": [
                    "skipping tests",
                    "when a named behavior is skipped",
                    "it should NOT run any assertions"
                  ],
                  "behavior": "skipping tests, when a named behavior is skipped, it should NOT run any assertions",
                  "skipped": false
                },
                {
                  "id": "T2116234970",
                  "behaviors": [
                    "skipping tests",
                    "when a named behavior is skipped",
                    "it should count the assertions that were skipped"
                  ],
                  "behavior": "skipping tests, when a named behavior is skipped, it should count the assertions that were skipped",
                  "skipped": false
                },
                {
                  "id": "T3686174769",
                  "behaviors": [
                    "skipping tests",
                    "when a named behavior is skipped",
                    "it should produce outcomes with a status of SKIPPED"
                  ],
                  "behavior": "skipping tests, when a named behavior is skipped, it should produce outcomes with a status of SKIPPED",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B292274576",
              "assertions": [
                {
                  "id": "T3626082049",
                  "behaviors": [
                    "skipping tests",
                    "when an assertion is skipped",
                    "it should run the behavior"
                  ],
                  "behavior": "skipping tests, when an assertion is skipped, it should run the behavior",
                  "skipped": false
                },
                {
                  "id": "T547674825",
                  "behaviors": [
                    "skipping tests",
                    "when an assertion is skipped",
                    "it should run the other assertions"
                  ],
                  "behavior": "skipping tests, when an assertion is skipped, it should run the other assertions",
                  "skipped": false
                },
                {
                  "id": "T234758359",
                  "behaviors": [
                    "skipping tests",
                    "when an assertion is skipped",
                    "it should NOT run the skipped assertion"
                  ],
                  "behavior": "skipping tests, when an assertion is skipped, it should NOT run the skipped assertion",
                  "skipped": false
                },
                {
                  "id": "T816738356",
                  "behaviors": [
                    "skipping tests",
                    "when an assertion is skipped",
                    "it should count the assertions that were skipped"
                  ],
                  "behavior": "skipping tests, when an assertion is skipped, it should count the assertions that were skipped",
                  "skipped": false
                },
                {
                  "id": "T2928585722",
                  "behaviors": [
                    "skipping tests",
                    "when an assertion is skipped",
                    "it should produce outcomes with a status of SKIPPED"
                  ],
                  "behavior": "skipping tests, when an assertion is skipped, it should produce outcomes with a status of SKIPPED",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3062248590",
              "assertions": [
                {
                  "id": "T3145459613",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's SKIP directive",
                    "it should run the behavior"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's SKIP directive, it should run the behavior",
                  "skipped": false
                },
                {
                  "id": "T1142213017",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's SKIP directive",
                    "it should run the other assertions"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's SKIP directive, it should run the other assertions",
                  "skipped": false
                },
                {
                  "id": "T817066554",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's SKIP directive",
                    "it should NOT run the skipped assertion"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's SKIP directive, it should NOT run the skipped assertion",
                  "skipped": false
                },
                {
                  "id": "T590818120",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's SKIP directive",
                    "it should count the assertions that were skipped"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's SKIP directive, it should count the assertions that were skipped",
                  "skipped": false
                },
                {
                  "id": "T2578327884",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's SKIP directive",
                    "it should produce outcomes with a status of SKIPPED"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's SKIP directive, it should produce outcomes with a status of SKIPPED",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3267492567",
              "assertions": [
                {
                  "id": "T3300348428",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's TODO directive",
                    "it should run the behavior"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's TODO directive, it should run the behavior",
                  "skipped": false
                },
                {
                  "id": "T4151420164",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's TODO directive",
                    "it should run the other assertions"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's TODO directive, it should run the other assertions",
                  "skipped": false
                },
                {
                  "id": "T271535009",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's TODO directive",
                    "it should NOT run the skipped assertion"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's TODO directive, it should NOT run the skipped assertion",
                  "skipped": false
                },
                {
                  "id": "T2482641236",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's TODO directive",
                    "it should count the assertions that were skipped"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's TODO directive, it should count the assertions that were skipped",
                  "skipped": false
                },
                {
                  "id": "T1381204779",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's TODO directive",
                    "it should produce outcomes with a status of SKIPPED"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's TODO directive, it should produce outcomes with a status of SKIPPED",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B3106365075",
          "theories": [
            {
              "id": "B3106365075",
              "assertions": [
                {
                  "id": "T1579980829",
                  "behaviors": [
                    "slow test 0",
                    "it should be delayed"
                  ],
                  "behavior": "slow test 0, it should be delayed",
                  "skipped": false
                }
              ],
              "skipped": false,
              "timeout": 2000
            }
          ]
        },
        {
          "batchId": "B1160732269",
          "theories": [
            {
              "id": "B1160732269",
              "assertions": [
                {
                  "id": "T2651701043",
                  "behaviors": [
                    "slow test 1",
                    "it should be delayed"
                  ],
                  "behavior": "slow test 1, it should be delayed",
                  "skipped": false
                }
              ],
              "skipped": false,
              "timeout": 2000
            }
          ]
        },
        {
          "batchId": "B3897443046",
          "theories": [
            {
              "id": "B3897443046",
              "assertions": [
                {
                  "id": "T1607347637",
                  "behaviors": [
                    "slow test 2",
                    "it should be delayed"
                  ],
                  "behavior": "slow test 2, it should be delayed",
                  "skipped": false
                }
              ],
              "skipped": false,
              "timeout": 2000
            }
          ]
        },
        {
          "batchId": "B1734145665",
          "theories": [
            {
              "id": "B1734145665",
              "assertions": [
                {
                  "id": "T1552166806",
                  "behaviors": [
                    "slow test 3",
                    "it should be delayed"
                  ],
                  "behavior": "slow test 3, it should be delayed",
                  "skipped": false
                }
              ],
              "skipped": false,
              "timeout": 2000
            }
          ]
        },
        {
          "batchId": "B2703165877",
          "theories": [
            {
              "id": "B2703165877",
              "assertions": [
                {
                  "id": "T1349720967",
                  "behaviors": [
                    "slow test 4",
                    "it should be delayed"
                  ],
                  "behavior": "slow test 4, it should be delayed",
                  "skipped": false
                }
              ],
              "skipped": false,
              "timeout": 2000
            }
          ]
        }
      ],
      "order": [
        "T234613271",
        "T2979873516",
        "T1762544061",
        "T2111249353",
        "T2009783305",
        "T872280371",
        "T3108099732",
        "T272289404",
        "T1935099767",
        "T3986766525",
        "T1666834789",
        "T3601344453",
        "T3832517023",
        "T3858743262",
        "T833920087",
        "T3574369160",
        "T2339922183",
        "T1305431340",
        "T2076592319",
        "T4198641560",
        "T3199713793",
        "T2583312209",
        "T3856250700",
        "T781209833",
        "T1876945275",
        "T234034953",
        "T4097946667",
        "T3428553742",
        "T1948043456",
        "T4055811011",
        "T2758195184",
        "T286230725",
        "T1192774473",
        "T1487094483",
        "T1581490773",
        "T3746640873",
        "T2869232150",
        "T3094947494",
        "T2072171258",
        "T3782690787",
        "T3183670899",
        "T2135440836",
        "T2283557910",
        "T2439160698",
        "T523737698",
        "T3181904741",
        "T2615220919",
        "T1282916600",
        "T3386406585",
        "T2336706472",
        "T482193410",
        "T2547240914",
        "T3062352938",
        "T1788022703",
        "T1840921739",
        "T3701701087",
        "T2351029604",
        "T2074324936",
        "T496768875",
        "T4101655569",
        "T4195653468",
        "T548857253",
        "T54769290",
        "T2582326040",
        "T647198938",
        "T3050652413",
        "T67986680",
        "T3994234473",
        "T1489044925",
        "T3019135220",
        "T3627335037",
        "T3508928479",
        "T335109675",
        "T3699574721",
        "T643190769",
        "T411392620",
        "T3705649512",
        "T754121129",
        "T206888825",
        "T3410282755",
        "T2221856548",
        "T3722697963",
        "T632654725",
        "T242631415",
        "T2116234970",
        "T3686174769",
        "T3626082049",
        "T547674825",
        "T234758359",
        "T816738356",
        "T2928585722",
        "T3145459613",
        "T1142213017",
        "T817066554",
        "T590818120",
        "T2578327884",
        "T3300348428",
        "T4151420164",
        "T271535009",
        "T2482641236",
        "T1381204779",
        "T1579980829",
        "T2651701043",
        "T1607347637",
        "T1552166806",
        "T1349720967"
      ]
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3445501094",
    "testId": "T234613271",
    "count": 31,
    "time": 416963783812.315,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "DefaultDiscoverer, when a runner is configured to match a different working directory, it should find and run those tests",
    "behaviors": [
      "DefaultDiscoverer",
      "when a runner is configured to match a different working directory",
      "it should find and run those tests"
    ],
    "duration": {
      "given": {
        "seconds": 0.00000993096923828125,
        "milliseconds": 0.00993096923828125,
        "microseconds": 9.93096923828125,
        "nanoseconds": 9930.96923828125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0008679060058593749,
        "milliseconds": 0.867906005859375,
        "microseconds": 867.906005859375,
        "nanoseconds": 867906.005859375
      },
      "total": {
        "seconds": 0.0008778369750976562,
        "milliseconds": 0.8778369750976563,
        "microseconds": 877.8369750976562,
        "nanoseconds": 877836.9750976562
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3445501094",
    "testId": "T2979873516",
    "count": 32,
    "time": 416963783828.473,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "DefaultDiscoverer, when a runner is configured to match a different working directory, the config that is returned should have the overrides",
    "behaviors": [
      "DefaultDiscoverer",
      "when a runner is configured to match a different working directory",
      "the config that is returned should have the overrides"
    ],
    "duration": {
      "given": {
        "seconds": 0.00000993096923828125,
        "milliseconds": 0.00993096923828125,
        "microseconds": 9.93096923828125,
        "nanoseconds": 9930.96923828125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0008835400390624999,
        "milliseconds": 0.8835400390625,
        "microseconds": 883.5400390625,
        "nanoseconds": 883540.0390625
      },
      "total": {
        "seconds": 0.0008934710083007811,
        "milliseconds": 0.8934710083007813,
        "microseconds": 893.4710083007812,
        "nanoseconds": 893471.0083007812
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3445501094",
    "testId": "T1762544061",
    "count": 33,
    "time": 416963783841.903,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "DefaultDiscoverer, when a runner is configured to match a different naming convention, using a regular expression, it should find and run those tests",
    "behaviors": [
      "DefaultDiscoverer",
      "when a runner is configured to match a different naming convention, using a regular expression",
      "it should find and run those tests"
    ],
    "duration": {
      "given": {
        "seconds": 0.0000017200317382812499,
        "milliseconds": 0.00172003173828125,
        "microseconds": 1.72003173828125,
        "nanoseconds": 1720.03173828125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0008964760131835938,
        "milliseconds": 0.8964760131835938,
        "microseconds": 896.4760131835938,
        "nanoseconds": 896476.0131835938
      },
      "total": {
        "seconds": 0.000898196044921875,
        "milliseconds": 0.8981960449218751,
        "microseconds": 898.196044921875,
        "nanoseconds": 898196.044921875
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3445501094",
    "testId": "T2111249353",
    "count": 34,
    "time": 416963783852.232,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "DefaultDiscoverer, when a runner is configured to match a different naming convention, using a regular expression, the config that is returned should have the overrides",
    "behaviors": [
      "DefaultDiscoverer",
      "when a runner is configured to match a different naming convention, using a regular expression",
      "the config that is returned should have the overrides"
    ],
    "duration": {
      "given": {
        "seconds": 0.0000017200317382812499,
        "milliseconds": 0.00172003173828125,
        "microseconds": 1.72003173828125,
        "nanoseconds": 1720.03173828125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0009063220214843749,
        "milliseconds": 0.906322021484375,
        "microseconds": 906.322021484375,
        "nanoseconds": 906322.021484375
      },
      "total": {
        "seconds": 0.0009080420532226562,
        "milliseconds": 0.9080420532226563,
        "microseconds": 908.0420532226562,
        "nanoseconds": 908042.0532226562
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3445501094",
    "testId": "T2009783305",
    "count": 35,
    "time": 416963783862.483,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "DefaultDiscoverer, when a runner is configured to match a different naming convention, using a test function, it should find and run those tests",
    "behaviors": [
      "DefaultDiscoverer",
      "when a runner is configured to match a different naming convention, using a test function",
      "it should find and run those tests"
    ],
    "duration": {
      "given": {
        "seconds": 7.509765624999999e-7,
        "milliseconds": 0.0007509765625,
        "microseconds": 0.7509765625,
        "nanoseconds": 750.9765625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0009161039428710937,
        "milliseconds": 0.9161039428710938,
        "microseconds": 916.1039428710938,
        "nanoseconds": 916103.9428710938
      },
      "total": {
        "seconds": 0.0009168549194335938,
        "milliseconds": 0.9168549194335938,
        "microseconds": 916.8549194335938,
        "nanoseconds": 916854.9194335938
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3445501094",
    "testId": "T872280371",
    "count": 36,
    "time": 416963783879.586,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "DefaultDiscoverer, it should inject the suite that is being run",
    "behaviors": [
      "DefaultDiscoverer",
      "it should inject the suite that is being run"
    ],
    "duration": {
      "given": {
        "seconds": 5.440063476562499e-7,
        "milliseconds": 0.00054400634765625,
        "microseconds": 0.54400634765625,
        "nanoseconds": 544.00634765625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00093272998046875,
        "milliseconds": 0.93272998046875,
        "microseconds": 932.72998046875,
        "nanoseconds": 932729.98046875
      },
      "total": {
        "seconds": 0.0009332739868164062,
        "milliseconds": 0.9332739868164063,
        "microseconds": 933.2739868164062,
        "nanoseconds": 933273.9868164062
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3445501094",
    "testId": "T3108099732",
    "count": 37,
    "time": 416963783887.533,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "DefaultDiscoverer, when a runner is configured to ignore a directory, using a regular expression, it should not find tests that directory",
    "behaviors": [
      "DefaultDiscoverer",
      "when a runner is configured to ignore a directory, using a regular expression",
      "it should not find tests that directory"
    ],
    "duration": {
      "given": {
        "seconds": 5.479736328125e-7,
        "milliseconds": 0.0005479736328125,
        "microseconds": 0.5479736328125,
        "nanoseconds": 547.9736328125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.000940197998046875,
        "milliseconds": 0.940197998046875,
        "microseconds": 940.197998046875,
        "nanoseconds": 940197.998046875
      },
      "total": {
        "seconds": 0.0009407459716796876,
        "milliseconds": 0.9407459716796874,
        "microseconds": 940.7459716796875,
        "nanoseconds": 940745.9716796875
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3445501094",
    "testId": "T272289404",
    "count": 38,
    "time": 416963783894.835,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "DefaultDiscoverer, when a runner is configured to ignore a directory, using a test function, it should not find tests that directory",
    "behaviors": [
      "DefaultDiscoverer",
      "when a runner is configured to ignore a directory, using a test function",
      "it should not find tests that directory"
    ],
    "duration": {
      "given": {
        "seconds": 5.179443359374999e-7,
        "milliseconds": 0.0005179443359375,
        "microseconds": 0.5179443359375,
        "nanoseconds": 517.9443359375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0009470230102539062,
        "milliseconds": 0.9470230102539062,
        "microseconds": 947.0230102539062,
        "nanoseconds": 947023.0102539062
      },
      "total": {
        "seconds": 0.0009475409545898437,
        "milliseconds": 0.9475409545898438,
        "microseconds": 947.5409545898438,
        "nanoseconds": 947540.9545898438
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3445501094",
    "testId": "T1935099767",
    "count": 39,
    "time": 416963783902.014,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "DefaultDiscoverer, when a runner is configured to ignore a file path, it should not find tests that directory",
    "behaviors": [
      "DefaultDiscoverer",
      "when a runner is configured to ignore a file path",
      "it should not find tests that directory"
    ],
    "duration": {
      "given": {
        "seconds": 5.199584960937499e-7,
        "milliseconds": 0.00051995849609375,
        "microseconds": 0.51995849609375,
        "nanoseconds": 519.95849609375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0009536770019531249,
        "milliseconds": 0.953677001953125,
        "microseconds": 953.677001953125,
        "nanoseconds": 953677.001953125
      },
      "total": {
        "seconds": 0.0009541969604492187,
        "milliseconds": 0.9541969604492188,
        "microseconds": 954.1969604492188,
        "nanoseconds": 954196.9604492188
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3445501094",
    "testId": "T3986766525",
    "count": 28,
    "time": 416963780005.171,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "DefaultDiscoverer, when the runner executes a test that doesn't support injection, it should execute those files, but will not be able to report findings correctly",
    "behaviors": [
      "DefaultDiscoverer",
      "when the runner executes a test that doesn't support injection",
      "it should execute those files, but will not be able to report findings correctly"
    ],
    "duration": {
      "given": {
        "seconds": 5.01953125e-7,
        "milliseconds": 0.000501953125,
        "microseconds": 0.501953125,
        "nanoseconds": 501.953125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0000780460205078125,
        "milliseconds": 0.07804602050781251,
        "microseconds": 78.0460205078125,
        "nanoseconds": 78046.0205078125
      },
      "total": {
        "seconds": 0.0000785479736328125,
        "milliseconds": 0.0785479736328125,
        "microseconds": 78.5479736328125,
        "nanoseconds": 78547.9736328125
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3445501094",
    "testId": "T1666834789",
    "count": 30,
    "time": 416963783732.544,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "DefaultDiscoverer, when the runner executes a test that doesn't return a promise, it should execute those files, but will not be able to report findings correctly",
    "behaviors": [
      "DefaultDiscoverer",
      "when the runner executes a test that doesn't return a promise",
      "it should execute those files, but will not be able to report findings correctly"
    ],
    "duration": {
      "given": {
        "seconds": 4.8602294921875e-7,
        "milliseconds": 0.00048602294921875,
        "microseconds": 0.48602294921875,
        "nanoseconds": 486.02294921875
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0007888099975585937,
        "milliseconds": 0.7888099975585937,
        "microseconds": 788.8099975585938,
        "nanoseconds": 788809.9975585938
      },
      "total": {
        "seconds": 0.0007892960205078124,
        "milliseconds": 0.7892960205078124,
        "microseconds": 789.2960205078125,
        "nanoseconds": 789296.0205078125
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3445501094",
    "testId": "T3601344453",
    "count": 40,
    "time": 416963783909.361,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "DefaultDiscoverer, it should walk the tree, and find specs in any folder within the working directory, and the directories",
    "behaviors": [
      "DefaultDiscoverer",
      "it should walk the tree",
      "and find specs in any folder within the working directory, and the directories"
    ],
    "duration": {
      "given": {
        "seconds": 5.1702880859375e-7,
        "milliseconds": 0.00051702880859375,
        "microseconds": 0.51702880859375,
        "nanoseconds": 517.02880859375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0009605450439453125,
        "milliseconds": 0.9605450439453125,
        "microseconds": 960.5450439453125,
        "nanoseconds": 960545.0439453125
      },
      "total": {
        "seconds": 0.0009610620727539062,
        "milliseconds": 0.9610620727539062,
        "microseconds": 961.0620727539062,
        "nanoseconds": 961062.0727539062
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1780998498",
    "testId": "T3832517023",
    "count": 89,
    "time": 416963797445.927,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "Suite, when a new suite is created with a timeout, it should use the configured timeout",
    "behaviors": [
      "Suite",
      "when a new suite is created with a timeout",
      "it should use the configured timeout"
    ],
    "duration": {
      "given": {
        "seconds": 4.959716796875e-7,
        "milliseconds": 0.0004959716796875,
        "microseconds": 0.4959716796875,
        "nanoseconds": 495.9716796875
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00012319097900390625,
        "milliseconds": 0.12319097900390626,
        "microseconds": 123.19097900390625,
        "nanoseconds": 123190.97900390625
      },
      "total": {
        "seconds": 0.00012368695068359375,
        "milliseconds": 0.12368695068359375,
        "microseconds": 123.68695068359375,
        "nanoseconds": 123686.95068359375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1780998498",
    "testId": "T3858743262",
    "count": 52,
    "time": 416963794411.614,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "Suite, when a new suite is created with an assertion library, it should use the configured assertion library",
    "behaviors": [
      "Suite",
      "when a new suite is created with an assertion library",
      "it should use the configured assertion library"
    ],
    "duration": {
      "given": {
        "seconds": 4.9700927734375e-7,
        "milliseconds": 0.00049700927734375,
        "microseconds": 0.49700927734375,
        "nanoseconds": 497.00927734375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00033165502929687497,
        "milliseconds": 0.331655029296875,
        "microseconds": 331.655029296875,
        "nanoseconds": 331655.029296875
      },
      "total": {
        "seconds": 0.0003321520385742187,
        "milliseconds": 0.33215203857421877,
        "microseconds": 332.15203857421875,
        "nanoseconds": 332152.03857421875
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1780998498",
    "testId": "T833920087",
    "count": 77,
    "time": 416963795581.609,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "Suite, when a new suite is created with a reporter name, it should use the configured reporter",
    "behaviors": [
      "Suite",
      "when a new suite is created with a reporter name",
      "it should use the configured reporter"
    ],
    "duration": {
      "given": {
        "seconds": 4.89990234375e-7,
        "milliseconds": 0.000489990234375,
        "microseconds": 0.489990234375,
        "nanoseconds": 489.990234375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0011493939819335938,
        "milliseconds": 1.1493939819335939,
        "microseconds": 1149.3939819335938,
        "nanoseconds": 1149393.9819335938
      },
      "total": {
        "seconds": 0.0011498839721679687,
        "milliseconds": 1.1498839721679688,
        "microseconds": 1149.8839721679688,
        "nanoseconds": 1149883.9721679688
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1780998498",
    "testId": "T3574369160",
    "count": 1,
    "time": 416963772914.541,
    "type": "TEST",
    "status": "SKIPPED",
    "behavior": "Suite, when a new suite is created with a reporter name, # TODO and the reporter is unknown, it should use the default reporter",
    "behaviors": [
      "Suite",
      "when a new suite is created with a reporter name",
      "# TODO and the reporter is unknown",
      "it should use the default reporter"
    ]
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1780998498",
    "testId": "T2339922183",
    "count": 78,
    "time": 416963795589.994,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "Suite, when a new suite is created with multiple reporters, it should use all configured reporters",
    "behaviors": [
      "Suite",
      "when a new suite is created with multiple reporters",
      "it should use all configured reporters"
    ],
    "duration": {
      "given": {
        "seconds": 5.3802490234375e-7,
        "milliseconds": 0.00053802490234375,
        "microseconds": 0.53802490234375,
        "nanoseconds": 538.02490234375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0011569460449218749,
        "milliseconds": 1.156946044921875,
        "microseconds": 1156.946044921875,
        "nanoseconds": 1156946.044921875
      },
      "total": {
        "seconds": 0.0011574840698242185,
        "milliseconds": 1.1574840698242186,
        "microseconds": 1157.4840698242188,
        "nanoseconds": 1157484.0698242188
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1780998498",
    "testId": "T1305431340",
    "count": 79,
    "time": 416963795596.894,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "Suite, when a new suite is created with a reporter (legacy: `{ report (event: ITestEvent): Promise<void> }`), it should use the configured reporter",
    "behaviors": [
      "Suite",
      "when a new suite is created with a reporter (legacy: `{ report (event: ITestEvent): Promise<void> }`)",
      "it should use the configured reporter"
    ],
    "duration": {
      "given": {
        "seconds": 5.2203369140625e-7,
        "milliseconds": 0.00052203369140625,
        "microseconds": 0.52203369140625,
        "nanoseconds": 522.03369140625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0011633499755859375,
        "milliseconds": 1.1633499755859376,
        "microseconds": 1163.3499755859375,
        "nanoseconds": 1163349.9755859375
      },
      "total": {
        "seconds": 0.0011638720092773437,
        "milliseconds": 1.1638720092773438,
        "microseconds": 1163.8720092773438,
        "nanoseconds": 1163872.0092773438
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1780998498",
    "testId": "T2076592319",
    "count": 80,
    "time": 416963795607.772,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "Suite, when a new suite is created with a reporter (`{ write (event: ITestEvent): Promise<void> }`), it should use the configured reporter",
    "behaviors": [
      "Suite",
      "when a new suite is created with a reporter (`{ write (event: ITestEvent): Promise<void> }`)",
      "it should use the configured reporter"
    ],
    "duration": {
      "given": {
        "seconds": 5.0103759765625e-7,
        "milliseconds": 0.00050103759765625,
        "microseconds": 0.50103759765625,
        "nanoseconds": 501.03759765625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0011737569580078124,
        "milliseconds": 1.1737569580078124,
        "microseconds": 1173.7569580078125,
        "nanoseconds": 1173756.9580078125
      },
      "total": {
        "seconds": 0.0011742579956054687,
        "milliseconds": 1.1742579956054686,
        "microseconds": 1174.2579956054688,
        "nanoseconds": 1174257.9956054688
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1780998498",
    "testId": "T4198641560",
    "count": 81,
    "time": 416963795614.756,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "Suite, when a new suite is created with a reporter (`(event: ITestEvent): Promise<void>`), it should use the configured reporter",
    "behaviors": [
      "Suite",
      "when a new suite is created with a reporter (`(event: ITestEvent): Promise<void>`)",
      "it should use the configured reporter"
    ],
    "duration": {
      "given": {
        "seconds": 5e-7,
        "milliseconds": 0.0005,
        "microseconds": 0.5,
        "nanoseconds": 500
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0011802049560546875,
        "milliseconds": 1.1802049560546874,
        "microseconds": 1180.2049560546875,
        "nanoseconds": 1180204.9560546875
      },
      "total": {
        "seconds": 0.0011807049560546875,
        "milliseconds": 1.1807049560546874,
        "microseconds": 1180.7049560546875,
        "nanoseconds": 1180704.9560546875
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1780998498",
    "testId": "T3199713793",
    "count": 53,
    "time": 416963794435.291,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "Suite, when a new suite is created with given and when synonyms, it should use the configured synonyms",
    "behaviors": [
      "Suite",
      "when a new suite is created with given and when synonyms",
      "it should use the configured synonyms"
    ],
    "duration": {
      "given": {
        "seconds": 4.9200439453125e-7,
        "milliseconds": 0.00049200439453125,
        "microseconds": 0.49200439453125,
        "nanoseconds": 492.00439453125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00035337799072265625,
        "milliseconds": 0.35337799072265624,
        "microseconds": 353.37799072265625,
        "nanoseconds": 353377.99072265625
      },
      "total": {
        "seconds": 0.0003538699951171875,
        "milliseconds": 0.3538699951171875,
        "microseconds": 353.8699951171875,
        "nanoseconds": 353869.9951171875
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1780998498",
    "testId": "T2583312209",
    "count": 3,
    "time": 416963777350.201,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "Suite, when a new suite is created with given and when synonyms, and the synonyms include empty strings, it should NOT use the configured synonyms",
    "behaviors": [
      "Suite",
      "when a new suite is created with given and when synonyms",
      "and the synonyms include empty strings",
      "it should NOT use the configured synonyms"
    ],
    "duration": {
      "given": {
        "seconds": 5.369873046875e-7,
        "milliseconds": 0.0005369873046875,
        "microseconds": 0.5369873046875,
        "nanoseconds": 536.9873046875
      },
      "when": {
        "seconds": 0.00023288897705078123,
        "milliseconds": 0.23288897705078127,
        "microseconds": 232.88897705078125,
        "nanoseconds": 232888.97705078125
      },
      "then": {
        "seconds": 0.0035672589721679688,
        "milliseconds": 3.5672589721679686,
        "microseconds": 3567.2589721679688,
        "nanoseconds": 3567258.9721679688
      },
      "total": {
        "seconds": 0.0038006849365234373,
        "milliseconds": 3.8006849365234374,
        "microseconds": 3800.6849365234375,
        "nanoseconds": 3800684.9365234375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1780998498",
    "testId": "T3856250700",
    "count": 4,
    "time": 416963777600.388,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "Suite, when a new suite is created with given and when synonyms, and the synonyms include non-strings, it should NOT use the configured synonyms",
    "behaviors": [
      "Suite",
      "when a new suite is created with given and when synonyms",
      "and the synonyms include non-strings",
      "it should NOT use the configured synonyms"
    ],
    "duration": {
      "given": {
        "seconds": 4.849853515625e-7,
        "milliseconds": 0.0004849853515625,
        "microseconds": 0.4849853515625,
        "nanoseconds": 484.9853515625
      },
      "when": {
        "seconds": 0.00025162103271484374,
        "milliseconds": 0.25162103271484376,
        "microseconds": 251.62103271484375,
        "nanoseconds": 251621.03271484375
      },
      "then": {
        "seconds": 0.0038160770263671873,
        "milliseconds": 3.8160770263671875,
        "microseconds": 3816.0770263671875,
        "nanoseconds": 3816077.0263671875
      },
      "total": {
        "seconds": 0.0040681830444335935,
        "milliseconds": 4.068183044433594,
        "microseconds": 4068.1830444335938,
        "nanoseconds": 4068183.0444335938
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B738634920",
    "testId": "T781209833",
    "count": 5,
    "time": 416963777643.562,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "assertion styles, when the assertions don't curry, it should support one big func",
    "behaviors": [
      "assertion styles",
      "when the assertions don't curry",
      "it should support one big func"
    ],
    "duration": {
      "given": {
        "seconds": 4.990234375e-7,
        "milliseconds": 0.0004990234375,
        "microseconds": 0.4990234375,
        "nanoseconds": 499.0234375
      },
      "when": {
        "seconds": 0.000013794006347656249,
        "milliseconds": 0.01379400634765625,
        "microseconds": 13.79400634765625,
        "nanoseconds": 13794.00634765625
      },
      "then": {
        "seconds": 0.0038586300048828125,
        "milliseconds": 3.8586300048828126,
        "microseconds": 3858.6300048828125,
        "nanoseconds": 3858630.0048828125
      },
      "total": {
        "seconds": 0.003872923034667969,
        "milliseconds": 3.872923034667969,
        "microseconds": 3872.9230346679688,
        "nanoseconds": 3872923.0346679688
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B738634920",
    "testId": "T1876945275",
    "count": 6,
    "time": 416963777659.43,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "assertion styles, when the assertions curry, it should support currying",
    "behaviors": [
      "assertion styles",
      "when the assertions curry",
      "it should support currying"
    ],
    "duration": {
      "given": {
        "seconds": 4.960327148437499e-7,
        "milliseconds": 0.00049603271484375,
        "microseconds": 0.49603271484375,
        "nanoseconds": 496.03271484375
      },
      "when": {
        "seconds": 0.000008218017578124999,
        "milliseconds": 0.008218017578125,
        "microseconds": 8.218017578125,
        "nanoseconds": 8218.017578125
      },
      "then": {
        "seconds": 0.003873968017578125,
        "milliseconds": 3.8739680175781253,
        "microseconds": 3873.968017578125,
        "nanoseconds": 3873968.017578125
      },
      "total": {
        "seconds": 0.003882682067871094,
        "milliseconds": 3.882682067871094,
        "microseconds": 3882.6820678710938,
        "nanoseconds": 3882682.0678710938
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B738634920",
    "testId": "T234034953",
    "count": 7,
    "time": 416963777673.834,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "assertion styles, when the assertions ignore the results of when, it should support just accepting the assertion library",
    "behaviors": [
      "assertion styles",
      "when the assertions ignore the results of when",
      "it should support just accepting the assertion library"
    ],
    "duration": {
      "given": {
        "seconds": 4.9395751953125e-7,
        "milliseconds": 0.00049395751953125,
        "microseconds": 0.49395751953125,
        "nanoseconds": 493.95751953125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0038878909912109373,
        "milliseconds": 3.8878909912109374,
        "microseconds": 3887.8909912109375,
        "nanoseconds": 3887890.9912109375
      },
      "total": {
        "seconds": 0.0038883849487304687,
        "milliseconds": 3.8883849487304687,
        "microseconds": 3888.3849487304688,
        "nanoseconds": 3888384.9487304688
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B642265724",
    "testId": "T4097946667",
    "count": 27,
    "time": 416963778401.59,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "async tests, when given returns a promise, it should resolve the promise",
    "behaviors": [
      "async tests",
      "when given returns a promise",
      "it should resolve the promise"
    ],
    "duration": {
      "given": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.000714123046875,
        "milliseconds": 0.7141230468750001,
        "microseconds": 714.123046875,
        "nanoseconds": 714123.046875
      },
      "total": {
        "seconds": 0.000714123046875,
        "milliseconds": 0.7141230468750001,
        "microseconds": 714.123046875,
        "nanoseconds": 714123.046875
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B642265724",
    "testId": "T3428553742",
    "count": 8,
    "time": 416963777688.463,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "async tests, when given returns a value (not a promise), it should resolve the value",
    "behaviors": [
      "async tests",
      "when given returns a value (not a promise)",
      "it should resolve the value"
    ],
    "duration": {
      "given": {
        "seconds": 0.00001613397216796875,
        "milliseconds": 0.01613397216796875,
        "microseconds": 16.13397216796875,
        "nanoseconds": 16133.97216796875
      },
      "when": {
        "seconds": 0.0000030560302734374998,
        "milliseconds": 0.0030560302734375,
        "microseconds": 3.0560302734375,
        "nanoseconds": 3056.0302734375
      },
      "then": {
        "seconds": 0.0039015800170898434,
        "milliseconds": 3.901580017089844,
        "microseconds": 3901.5800170898438,
        "nanoseconds": 3901580.0170898438
      },
      "total": {
        "seconds": 0.0039207700195312495,
        "milliseconds": 3.92077001953125,
        "microseconds": 3920.77001953125,
        "nanoseconds": 3920770.01953125
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B642265724",
    "testId": "T1948043456",
    "count": 26,
    "time": 416963778134.538,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "async tests, when when returns a promise, it should resolve the promise",
    "behaviors": [
      "async tests",
      "when when returns a promise",
      "it should resolve the promise"
    ],
    "duration": {
      "given": {
        "seconds": 6.97998046875e-7,
        "milliseconds": 0.000697998046875,
        "microseconds": 0.697998046875,
        "nanoseconds": 697.998046875
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.002482100036621094,
        "milliseconds": 2.4821000366210937,
        "microseconds": 2482.1000366210938,
        "nanoseconds": 2482100.0366210938
      },
      "total": {
        "seconds": 0.002482798034667969,
        "milliseconds": 2.482798034667969,
        "microseconds": 2482.7980346679688,
        "nanoseconds": 2482798.0346679688
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B642265724",
    "testId": "T4055811011",
    "count": 9,
    "time": 416963777766.943,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "async tests, when when returns a value (not a promise), it should resolve the value",
    "behaviors": [
      "async tests",
      "when when returns a value (not a promise)",
      "it should resolve the value"
    ],
    "duration": {
      "given": {
        "seconds": 4.8297119140625e-7,
        "milliseconds": 0.00048297119140625,
        "microseconds": 0.48297119140625,
        "nanoseconds": 482.97119140625
      },
      "when": {
        "seconds": 0.000007273010253906249,
        "milliseconds": 0.00727301025390625,
        "microseconds": 7.27301025390625,
        "nanoseconds": 7273.01025390625
      },
      "then": {
        "seconds": 0.0039792080078124995,
        "milliseconds": 3.9792080078125003,
        "microseconds": 3979.2080078125,
        "nanoseconds": 3979208.0078125
      },
      "total": {
        "seconds": 0.003986963989257812,
        "milliseconds": 3.986963989257813,
        "microseconds": 3986.9639892578125,
        "nanoseconds": 3986963.9892578125
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B642265724",
    "testId": "T2758195184",
    "count": 87,
    "time": 416963796735.525,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "async tests, when an assertion returns a promise, it should run the asserion asynchronously",
    "behaviors": [
      "async tests",
      "when an assertion returns a promise",
      "it should run the asserion asynchronously"
    ],
    "duration": {
      "given": {
        "seconds": 4.8394775390625e-7,
        "milliseconds": 0.00048394775390625,
        "microseconds": 0.48394775390625,
        "nanoseconds": 483.94775390625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0000458260498046875,
        "milliseconds": 0.0458260498046875,
        "microseconds": 45.8260498046875,
        "nanoseconds": 45826.0498046875
      },
      "total": {
        "seconds": 0.00004630999755859375,
        "milliseconds": 0.046309997558593746,
        "microseconds": 46.30999755859375,
        "nanoseconds": 46309.99755859375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B642265724",
    "testId": "T286230725",
    "count": 88,
    "time": 416963796789.778,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "async tests, when an assertion uses async await, it should run the asserion asynchronously",
    "behaviors": [
      "async tests",
      "when an assertion uses async await",
      "it should run the asserion asynchronously"
    ],
    "duration": {
      "given": {
        "seconds": 4.88037109375e-7,
        "milliseconds": 0.000488037109375,
        "microseconds": 0.488037109375,
        "nanoseconds": 488.037109375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00005548101806640625,
        "milliseconds": 0.05548101806640625,
        "microseconds": 55.48101806640625,
        "nanoseconds": 55481.01806640625
      },
      "total": {
        "seconds": 0.00005596905517578125,
        "milliseconds": 0.05596905517578125,
        "microseconds": 55.96905517578125,
        "nanoseconds": 55969.05517578125
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B4113453863",
    "testId": "T1192774473",
    "count": 54,
    "time": 416963794446.656,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "ava and tape compatibility, when a test is described, using the ava and tape syntax, it should run the tests",
    "behaviors": [
      "ava and tape compatibility",
      "when a test is described, using the ava and tape syntax",
      "it should run the tests"
    ],
    "duration": {
      "given": {
        "seconds": 4.9102783203125e-7,
        "milliseconds": 0.00049102783203125,
        "microseconds": 0.49102783203125,
        "nanoseconds": 491.02783203125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00036419702148437496,
        "milliseconds": 0.364197021484375,
        "microseconds": 364.197021484375,
        "nanoseconds": 364197.021484375
      },
      "total": {
        "seconds": 0.0003646880493164062,
        "milliseconds": 0.36468804931640625,
        "microseconds": 364.68804931640625,
        "nanoseconds": 364688.04931640625
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B4113453863",
    "testId": "T1487094483",
    "count": 55,
    "time": 416963794456.994,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "ava and tape compatibility, when a test is described, using the ava and tape syntax, and it does not have a description, it should run the tests",
    "behaviors": [
      "ava and tape compatibility",
      "when a test is described, using the ava and tape syntax",
      "and it does not have a description",
      "it should run the tests"
    ],
    "duration": {
      "given": {
        "seconds": 5.5499267578125e-7,
        "milliseconds": 0.00055499267578125,
        "microseconds": 0.55499267578125,
        "nanoseconds": 554.99267578125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00037402301025390625,
        "milliseconds": 0.3740230102539063,
        "microseconds": 374.02301025390625,
        "nanoseconds": 374023.01025390625
      },
      "total": {
        "seconds": 0.0003745780029296875,
        "milliseconds": 0.3745780029296875,
        "microseconds": 374.5780029296875,
        "nanoseconds": 374578.0029296875
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B4113453863",
    "testId": "T1581490773",
    "count": 56,
    "time": 416963794465.017,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "ava and tape compatibility, when multiple ava styles tests are added to an object, it should provide a way to group tests in a suite, with a single execution",
    "behaviors": [
      "ava and tape compatibility",
      "when multiple ava styles tests are added to an object",
      "it should provide a way to group tests in a suite, with a single execution"
    ],
    "duration": {
      "given": {
        "seconds": 4.9200439453125e-7,
        "milliseconds": 0.00049200439453125,
        "microseconds": 0.49200439453125,
        "nanoseconds": 492.00439453125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0003815,
        "milliseconds": 0.3815,
        "microseconds": 381.5,
        "nanoseconds": 381500
      },
      "total": {
        "seconds": 0.00038199200439453123,
        "milliseconds": 0.38199200439453124,
        "microseconds": 381.99200439453125,
        "nanoseconds": 381992.00439453125
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3754655697",
    "testId": "T3746640873",
    "count": 99,
    "time": 416963799961.312,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "given different styles, AAA, when arrange, act, and assert(s) exist, given should produce to when, which should produce to the assertions",
    "behaviors": [
      "given different styles",
      "AAA",
      "when arrange, act, and assert(s) exist",
      "given should produce to when, which should produce to the assertions"
    ],
    "duration": {
      "given": {
        "seconds": 4.849853515625e-7,
        "milliseconds": 0.0004849853515625,
        "microseconds": 0.4849853515625,
        "nanoseconds": 484.9853515625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00003565399169921875,
        "milliseconds": 0.03565399169921875,
        "microseconds": 35.65399169921875,
        "nanoseconds": 35653.99169921875
      },
      "total": {
        "seconds": 0.00003613897705078125,
        "milliseconds": 0.03613897705078125,
        "microseconds": 36.13897705078125,
        "nanoseconds": 36138.97705078125
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3754655697",
    "testId": "T2869232150",
    "count": 100,
    "time": 416963799979.586,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "given different styles, AAA, when arrange, and assert(s) exist without act, `arrange` should be swapped out for `act`",
    "behaviors": [
      "given different styles",
      "AAA",
      "when arrange, and assert(s) exist without act",
      "`arrange` should be swapped out for `act`"
    ],
    "duration": {
      "given": {
        "seconds": 4.849853515625e-7,
        "milliseconds": 0.0004849853515625,
        "microseconds": 0.4849853515625,
        "nanoseconds": 484.9853515625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00005326202392578125,
        "milliseconds": 0.05326202392578125,
        "microseconds": 53.26202392578125,
        "nanoseconds": 53262.02392578125
      },
      "total": {
        "seconds": 0.00005374700927734375,
        "milliseconds": 0.05374700927734375,
        "microseconds": 53.74700927734375,
        "nanoseconds": 53747.00927734375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3754655697",
    "testId": "T3094947494",
    "count": 101,
    "time": 416963799989.04,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "given different styles, BDD, when given, when, and then(s) exist, given should produce to when, which should produce to the assertions",
    "behaviors": [
      "given different styles",
      "BDD",
      "when given, when, and then(s) exist",
      "given should produce to when, which should produce to the assertions"
    ],
    "duration": {
      "given": {
        "seconds": 7.400512695312499e-7,
        "milliseconds": 0.00074005126953125,
        "microseconds": 0.74005126953125,
        "nanoseconds": 740.05126953125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00006219000244140625,
        "milliseconds": 0.06219000244140625,
        "microseconds": 62.19000244140625,
        "nanoseconds": 62190.00244140625
      },
      "total": {
        "seconds": 0.0000629300537109375,
        "milliseconds": 0.0629300537109375,
        "microseconds": 62.9300537109375,
        "nanoseconds": 62930.0537109375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3754655697",
    "testId": "T2072171258",
    "count": 102,
    "time": 416963799997.598,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "given different styles, BDD, when given, and then(s) exist without when, `given` should be swapped out for `when`",
    "behaviors": [
      "given different styles",
      "BDD",
      "when given, and then(s) exist without when",
      "`given` should be swapped out for `when`"
    ],
    "duration": {
      "given": {
        "seconds": 4.980468749999999e-7,
        "milliseconds": 0.000498046875,
        "microseconds": 0.498046875,
        "nanoseconds": 498.046875
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00007026202392578125,
        "milliseconds": 0.07026202392578125,
        "microseconds": 70.26202392578125,
        "nanoseconds": 70262.02392578125
      },
      "total": {
        "seconds": 0.00007076007080078125,
        "milliseconds": 0.07076007080078126,
        "microseconds": 70.76007080078125,
        "nanoseconds": 70760.07080078125
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3754655697",
    "testId": "T3782690787",
    "count": 10,
    "time": 416963777786.968,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "given different styles, vows, when topics are used for `when/act`, it should execute the topic",
    "behaviors": [
      "given different styles",
      "vows",
      "when topics are used for `when/act`",
      "it should execute the topic"
    ],
    "duration": {
      "given": {
        "seconds": 4.8699951171875e-7,
        "milliseconds": 0.00048699951171875,
        "microseconds": 0.48699951171875,
        "nanoseconds": 486.99951171875
      },
      "when": {
        "seconds": 0.000016635009765625,
        "milliseconds": 0.016635009765625,
        "microseconds": 16.635009765625,
        "nanoseconds": 16635.009765625
      },
      "then": {
        "seconds": 0.003998661987304687,
        "milliseconds": 3.9986619873046876,
        "microseconds": 3998.6619873046875,
        "nanoseconds": 3998661.9873046875
      },
      "total": {
        "seconds": 0.0040157839965820315,
        "milliseconds": 4.015783996582031,
        "microseconds": 4015.7839965820312,
        "nanoseconds": 4015783.9965820312
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B4254496363",
    "testId": "T3183670899",
    "count": 93,
    "time": 416963797787.944,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "chainability, when then is used as an `after` hook for tests (i.e. for cleanup), it should run the after hook",
    "behaviors": [
      "chainability",
      "when then is used as an `after` hook for tests (i.e. for cleanup)",
      "it should run the after hook"
    ],
    "duration": {
      "given": {
        "seconds": 7.550048828124999e-7,
        "milliseconds": 0.0007550048828125001,
        "microseconds": 0.7550048828125,
        "nanoseconds": 755.0048828125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0000298289794921875,
        "milliseconds": 0.0298289794921875,
        "microseconds": 29.8289794921875,
        "nanoseconds": 29828.9794921875
      },
      "total": {
        "seconds": 0.000030583984375,
        "milliseconds": 0.030583984375,
        "microseconds": 30.583984375,
        "nanoseconds": 30583.984375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B4254496363",
    "testId": "T2135440836",
    "count": 104,
    "time": 416963806416.949,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "chainability, when then is used to run tests in a series, they should run in order",
    "behaviors": [
      "chainability",
      "when then is used to run tests in a series",
      "they should run in order"
    ],
    "duration": {
      "given": {
        "seconds": 4.9700927734375e-7,
        "milliseconds": 0.00049700927734375,
        "microseconds": 0.49700927734375,
        "nanoseconds": 497.00927734375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00006184698486328125,
        "milliseconds": 0.06184698486328125,
        "microseconds": 61.84698486328125,
        "nanoseconds": 61846.98486328125
      },
      "total": {
        "seconds": 0.000062343994140625,
        "milliseconds": 0.062343994140625004,
        "microseconds": 62.343994140625,
        "nanoseconds": 62343.994140625
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3547586930",
    "testId": "T2283557910",
    "count": 90,
    "time": 416963797463.694,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "test configuration, when a test sets a timeout, the test should be reported as BROKEN",
    "behaviors": [
      "test configuration",
      "when a test sets a timeout",
      "the test should be reported as BROKEN"
    ],
    "duration": {
      "given": {
        "seconds": 4.9395751953125e-7,
        "milliseconds": 0.00049395751953125,
        "microseconds": 0.49395751953125,
        "nanoseconds": 493.95751953125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00014029394531249998,
        "milliseconds": 0.1402939453125,
        "microseconds": 140.2939453125,
        "nanoseconds": 140293.9453125
      },
      "total": {
        "seconds": 0.00014078790283203124,
        "milliseconds": 0.14078790283203124,
        "microseconds": 140.78790283203125,
        "nanoseconds": 140787.90283203125
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3547586930",
    "testId": "T2439160698",
    "count": 92,
    "time": 416963797677.947,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "test configuration, when a test sets a timeout, and another node overrides it, it should use the configured timeout",
    "behaviors": [
      "test configuration",
      "when a test sets a timeout",
      "and another node overrides it",
      "it should use the configured timeout"
    ],
    "duration": {
      "given": {
        "seconds": 5.579833984374999e-7,
        "milliseconds": 0.0005579833984375,
        "microseconds": 0.5579833984375,
        "nanoseconds": 557.9833984375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.000051066040039062494,
        "milliseconds": 0.0510660400390625,
        "microseconds": 51.0660400390625,
        "nanoseconds": 51066.0400390625
      },
      "total": {
        "seconds": 0.000051624023437499993,
        "milliseconds": 0.051624023437500006,
        "microseconds": 51.6240234375,
        "nanoseconds": 51624.0234375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3547586930",
    "testId": "T523737698",
    "count": 91,
    "time": 416963797476.432,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "test configuration, when a test sets a timeout, with no description, the test should be reported as BROKEN",
    "behaviors": [
      "test configuration",
      "when a test sets a timeout, with no description",
      "the test should be reported as BROKEN"
    ],
    "duration": {
      "given": {
        "seconds": 4.91943359375e-7,
        "milliseconds": 0.000491943359375,
        "microseconds": 0.491943359375,
        "nanoseconds": 491.943359375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00015250903320312498,
        "milliseconds": 0.152509033203125,
        "microseconds": 152.509033203125,
        "nanoseconds": 152509.033203125
      },
      "total": {
        "seconds": 0.00015300097656249998,
        "milliseconds": 0.1530009765625,
        "microseconds": 153.0009765625,
        "nanoseconds": 153000.9765625
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3547586930",
    "testId": "T3181904741",
    "count": 11,
    "time": 416963777807.958,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "test configuration, when a test sets the assertion library, it should use the configured assertion library",
    "behaviors": [
      "test configuration",
      "when a test sets the assertion library",
      "it should use the configured assertion library"
    ],
    "duration": {
      "given": {
        "seconds": 5.2099609375e-7,
        "milliseconds": 0.00052099609375,
        "microseconds": 0.52099609375,
        "nanoseconds": 520.99609375
      },
      "when": {
        "seconds": 0.000015076049804687499,
        "milliseconds": 0.0150760498046875,
        "microseconds": 15.0760498046875,
        "nanoseconds": 15076.0498046875
      },
      "then": {
        "seconds": 0.004019173034667968,
        "milliseconds": 4.019173034667969,
        "microseconds": 4019.1730346679688,
        "nanoseconds": 4019173.0346679688
      },
      "total": {
        "seconds": 0.004034770080566406,
        "milliseconds": 4.034770080566407,
        "microseconds": 4034.7700805664062,
        "nanoseconds": 4034770.0805664062
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B853865684",
    "testId": "T2615220919",
    "count": 82,
    "time": 416963795622.63,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "assertion output, when an assertion passes, and returns an object with a `context` property, it should include the context in the event",
    "behaviors": [
      "assertion output",
      "when an assertion passes, and returns an object with a `context` property",
      "it should include the context in the event"
    ],
    "duration": {
      "given": {
        "seconds": 5.01953125e-7,
        "milliseconds": 0.000501953125,
        "microseconds": 0.501953125,
        "nanoseconds": 501.953125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0011502509765625,
        "milliseconds": 1.1502509765625,
        "microseconds": 1150.2509765625,
        "nanoseconds": 1150250.9765625
      },
      "total": {
        "seconds": 0.0011507529296874998,
        "milliseconds": 1.1507529296874999,
        "microseconds": 1150.7529296875,
        "nanoseconds": 1150752.9296875
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B853865684",
    "testId": "T1282916600",
    "count": 84,
    "time": 416963795808.3,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "assertion output, when an assertion passes, and returns a Promise with a `context` property, it should include the context in the event",
    "behaviors": [
      "assertion output",
      "when an assertion passes, and returns a Promise with a `context` property",
      "it should include the context in the event"
    ],
    "duration": {
      "given": {
        "seconds": 4.949951171875e-7,
        "milliseconds": 0.0004949951171875,
        "microseconds": 0.4949951171875,
        "nanoseconds": 494.9951171875
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0001765670166015625,
        "milliseconds": 0.17656701660156252,
        "microseconds": 176.5670166015625,
        "nanoseconds": 176567.0166015625
      },
      "total": {
        "seconds": 0.00017706201171875,
        "milliseconds": 0.17706201171875002,
        "microseconds": 177.06201171875,
        "nanoseconds": 177062.01171875
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2255567776",
    "testId": "T3386406585",
    "count": 2,
    "time": 416963773449.818,
    "type": "TEST",
    "status": "SKIPPED",
    "behavior": "when using supposed with mocha tests",
    "behaviors": [
      "// when using supposed with mocha tests"
    ]
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1588313070",
    "testId": "T2336706472",
    "count": 41,
    "time": 416963792545.77,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "errors, when the `given` throws an error, it should bail out",
    "behaviors": [
      "errors",
      "when the `given` throws an error",
      "it should bail out"
    ],
    "duration": {
      "given": {
        "seconds": 4.9798583984375e-7,
        "milliseconds": 0.00049798583984375,
        "microseconds": 0.49798583984375,
        "nanoseconds": 497.98583984375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00006422900390625,
        "milliseconds": 0.06422900390625,
        "microseconds": 64.22900390625,
        "nanoseconds": 64229.00390625
      },
      "total": {
        "seconds": 0.00006472698974609375,
        "milliseconds": 0.06472698974609375,
        "microseconds": 64.72698974609375,
        "nanoseconds": 64726.98974609375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1588313070",
    "testId": "T482193410",
    "count": 51,
    "time": 416963794093.155,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "errors, when the `when` throws an error, it should pass the error to the assertions",
    "behaviors": [
      "errors",
      "when the `when` throws an error",
      "it should pass the error to the assertions"
    ],
    "duration": {
      "given": {
        "seconds": 4.89013671875e-7,
        "milliseconds": 0.000489013671875,
        "microseconds": 0.489013671875,
        "nanoseconds": 489.013671875
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0000779010009765625,
        "milliseconds": 0.0779010009765625,
        "microseconds": 77.9010009765625,
        "nanoseconds": 77901.0009765625
      },
      "total": {
        "seconds": 0.00007839001464843749,
        "milliseconds": 0.07839001464843749,
        "microseconds": 78.3900146484375,
        "nanoseconds": 78390.0146484375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1588313070",
    "testId": "T2547240914",
    "count": 42,
    "time": 416963792689.878,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "errors, when the `given` rejects, it should bail out",
    "behaviors": [
      "errors",
      "when the `given` rejects",
      "it should bail out"
    ],
    "duration": {
      "given": {
        "seconds": 7.1099853515625e-7,
        "milliseconds": 0.0007109985351562501,
        "microseconds": 0.71099853515625,
        "nanoseconds": 710.99853515625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.000076593994140625,
        "milliseconds": 0.076593994140625,
        "microseconds": 76.593994140625,
        "nanoseconds": 76593.994140625
      },
      "total": {
        "seconds": 0.00007730499267578125,
        "milliseconds": 0.07730499267578125,
        "microseconds": 77.30499267578125,
        "nanoseconds": 77304.99267578125
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1588313070",
    "testId": "T3062352938",
    "count": 61,
    "time": 416963795380.575,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "errors, when the `when` rejects, it should pass the error to the assertions",
    "behaviors": [
      "errors",
      "when the `when` rejects",
      "it should pass the error to the assertions"
    ],
    "duration": {
      "given": {
        "seconds": 4.88037109375e-7,
        "milliseconds": 0.000488037109375,
        "microseconds": 0.488037109375,
        "nanoseconds": 488.037109375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0011097410278320312,
        "milliseconds": 1.1097410278320312,
        "microseconds": 1109.7410278320312,
        "nanoseconds": 1109741.0278320312
      },
      "total": {
        "seconds": 0.001110229064941406,
        "milliseconds": 1.1102290649414062,
        "microseconds": 1110.2290649414062,
        "nanoseconds": 1110229.0649414062
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1588313070",
    "testId": "T1788022703",
    "count": 57,
    "time": 416963794507.093,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "errors, when the assertion throws an error, the test should fail",
    "behaviors": [
      "errors",
      "when the assertion throws an error",
      "the test should fail"
    ],
    "duration": {
      "given": {
        "seconds": 5.9796142578125e-7,
        "milliseconds": 0.00059796142578125,
        "microseconds": 0.59796142578125,
        "nanoseconds": 597.96142578125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.000399197021484375,
        "milliseconds": 0.399197021484375,
        "microseconds": 399.197021484375,
        "nanoseconds": 399197.021484375
      },
      "total": {
        "seconds": 0.00039979498291015624,
        "milliseconds": 0.39979498291015625,
        "microseconds": 399.79498291015625,
        "nanoseconds": 399794.98291015625
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1588313070",
    "testId": "T1840921739",
    "count": 95,
    "time": 416963799439.547,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "errors, when `given` is never resolved, the test should be reported as BROKEN",
    "behaviors": [
      "errors",
      "when `given` is never resolved",
      "the test should be reported as BROKEN"
    ],
    "duration": {
      "given": {
        "seconds": 5e-7,
        "milliseconds": 0.0005,
        "microseconds": 0.5,
        "nanoseconds": 500
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0001757650146484375,
        "milliseconds": 0.1757650146484375,
        "microseconds": 175.7650146484375,
        "nanoseconds": 175765.0146484375
      },
      "total": {
        "seconds": 0.0001762650146484375,
        "milliseconds": 0.1762650146484375,
        "microseconds": 176.2650146484375,
        "nanoseconds": 176265.0146484375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1588313070",
    "testId": "T3701701087",
    "count": 96,
    "time": 416963799464.619,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "errors, when `when` is never resolved, the test should be reported as BROKEN",
    "behaviors": [
      "errors",
      "when `when` is never resolved",
      "the test should be reported as BROKEN"
    ],
    "duration": {
      "given": {
        "seconds": 4.9200439453125e-7,
        "milliseconds": 0.00049200439453125,
        "microseconds": 0.49200439453125,
        "nanoseconds": 492.00439453125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.000200135009765625,
        "milliseconds": 0.200135009765625,
        "microseconds": 200.135009765625,
        "nanoseconds": 200135.009765625
      },
      "total": {
        "seconds": 0.00020062701416015624,
        "milliseconds": 0.20062701416015627,
        "microseconds": 200.62701416015625,
        "nanoseconds": 200627.01416015625
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1588313070",
    "testId": "T2351029604",
    "count": 97,
    "time": 416963799476.356,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "errors, when async assertions never return, the test should be reported as BROKEN",
    "behaviors": [
      "errors",
      "when async assertions never return",
      "the test should be reported as BROKEN"
    ],
    "duration": {
      "given": {
        "seconds": 5.269775390625e-7,
        "milliseconds": 0.0005269775390625,
        "microseconds": 0.5269775390625,
        "nanoseconds": 526.9775390625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.000211322021484375,
        "milliseconds": 0.211322021484375,
        "microseconds": 211.322021484375,
        "nanoseconds": 211322.021484375
      },
      "total": {
        "seconds": 0.00021184899902343748,
        "milliseconds": 0.2118489990234375,
        "microseconds": 211.8489990234375,
        "nanoseconds": 211848.9990234375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1588313070",
    "testId": "T2074324936",
    "count": 98,
    "time": 416963799485.682,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "errors, when promised assertions never return, the test should be reported as BROKEN",
    "behaviors": [
      "errors",
      "when promised assertions never return",
      "the test should be reported as BROKEN"
    ],
    "duration": {
      "given": {
        "seconds": 4.949951171875e-7,
        "milliseconds": 0.0004949951171875,
        "microseconds": 0.4949951171875,
        "nanoseconds": 494.9951171875
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00022019000244140625,
        "milliseconds": 0.22019000244140627,
        "microseconds": 220.19000244140625,
        "nanoseconds": 220190.00244140625
      },
      "total": {
        "seconds": 0.00022068499755859374,
        "milliseconds": 0.22068499755859378,
        "microseconds": 220.68499755859375,
        "nanoseconds": 220684.99755859375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T496768875",
    "count": 58,
    "time": 416963794520.527,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when descriptions are deeply nested, it should run them all",
    "behaviors": [
      "supposed",
      "when descriptions are deeply nested",
      "it should run them all"
    ],
    "duration": {
      "given": {
        "seconds": 5.7403564453125e-7,
        "milliseconds": 0.00057403564453125,
        "microseconds": 0.57403564453125,
        "nanoseconds": 574.03564453125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00041185296630859373,
        "milliseconds": 0.41185296630859375,
        "microseconds": 411.85296630859375,
        "nanoseconds": 411852.96630859375
      },
      "total": {
        "seconds": 0.000412427001953125,
        "milliseconds": 0.412427001953125,
        "microseconds": 412.427001953125,
        "nanoseconds": 412427.001953125
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T4101655569",
    "count": 59,
    "time": 416963794530.432,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when nested assertions have no when, and a parent description does have a when, it should use the parent when",
    "behaviors": [
      "supposed",
      "when nested assertions have no when",
      "and a parent description does have a when",
      "it should use the parent when"
    ],
    "duration": {
      "given": {
        "seconds": 4.9896240234375e-7,
        "milliseconds": 0.00049896240234375,
        "microseconds": 0.49896240234375,
        "nanoseconds": 498.96240234375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0004212460327148437,
        "milliseconds": 0.42124603271484373,
        "microseconds": 421.24603271484375,
        "nanoseconds": 421246.03271484375
      },
      "total": {
        "seconds": 0.00042174499511718743,
        "milliseconds": 0.4217449951171875,
        "microseconds": 421.7449951171875,
        "nanoseconds": 421744.9951171875
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T4195653468",
    "count": 12,
    "time": 416963777817.606,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest has a when, it should support branching the rabbit hole",
    "behaviors": [
      "supposed",
      "when nested assertions have no given",
      "and a parent description does have a given",
      "and the nest has a when",
      "it should support branching the rabbit hole"
    ],
    "duration": {
      "given": {
        "seconds": 0.00000915899658203125,
        "milliseconds": 0.00915899658203125,
        "microseconds": 9.15899658203125,
        "nanoseconds": 9158.99658203125
      },
      "when": {
        "seconds": 0.00007476196289062499,
        "milliseconds": 0.074761962890625,
        "microseconds": 74.761962890625,
        "nanoseconds": 74761.962890625
      },
      "then": {
        "seconds": 0.004028176025390625,
        "milliseconds": 4.028176025390625,
        "microseconds": 4028.176025390625,
        "nanoseconds": 4028176.025390625
      },
      "total": {
        "seconds": 0.004112096984863281,
        "milliseconds": 4.112096984863281,
        "microseconds": 4112.096984863281,
        "nanoseconds": 4112096.9848632812
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T548857253",
    "count": 13,
    "time": 416963777826.313,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest has a when, and there's more nesting, with when's but not given's, the when's should receive the value from the parent given",
    "behaviors": [
      "supposed",
      "when nested assertions have no given",
      "and a parent description does have a given",
      "and the nest has a when",
      "and there's more nesting",
      "with when's but not given's",
      "the when's should receive the value from the parent given"
    ],
    "duration": {
      "given": {
        "seconds": 6.7498779296875e-7,
        "milliseconds": 0.0006749877929687501,
        "microseconds": 0.67498779296875,
        "nanoseconds": 674.98779296875
      },
      "when": {
        "seconds": 0.00002019598388671875,
        "milliseconds": 0.02019598388671875,
        "microseconds": 20.19598388671875,
        "nanoseconds": 20195.98388671875
      },
      "then": {
        "seconds": 0.004036394958496094,
        "milliseconds": 4.036394958496094,
        "microseconds": 4036.3949584960938,
        "nanoseconds": 4036394.9584960938
      },
      "total": {
        "seconds": 0.004057265930175781,
        "milliseconds": 4.057265930175781,
        "microseconds": 4057.2659301757812,
        "nanoseconds": 4057265.9301757812
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T54769290",
    "count": 14,
    "time": 416963777835.602,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest has a when, and there's more nesting, with when's and given's, the when's should receive the value from the overriding given",
    "behaviors": [
      "supposed",
      "when nested assertions have no given",
      "and a parent description does have a given",
      "and the nest has a when",
      "and there's more nesting",
      "with when's and given's",
      "the when's should receive the value from the overriding given"
    ],
    "duration": {
      "given": {
        "seconds": 0.000007515991210937499,
        "milliseconds": 0.0075159912109375,
        "microseconds": 7.5159912109375,
        "nanoseconds": 7515.9912109375
      },
      "when": {
        "seconds": 0.000016074951171875,
        "milliseconds": 0.016074951171875,
        "microseconds": 16.074951171875,
        "nanoseconds": 16074.951171875
      },
      "then": {
        "seconds": 0.004045198974609375,
        "milliseconds": 4.0451989746093755,
        "microseconds": 4045.198974609375,
        "nanoseconds": 4045198.974609375
      },
      "total": {
        "seconds": 0.004068789916992188,
        "milliseconds": 4.068789916992188,
        "microseconds": 4068.7899169921875,
        "nanoseconds": 4068789.9169921875
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T2582326040",
    "count": 15,
    "time": 416963777843.465,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest has a when, and there's more nesting, with when's and given's, in deeper nests, the when's should receive the value from the overriding given",
    "behaviors": [
      "supposed",
      "when nested assertions have no given",
      "and a parent description does have a given",
      "and the nest has a when",
      "and there's more nesting",
      "with when's and given's",
      "in deeper nests",
      "the when's should receive the value from the overriding given"
    ],
    "duration": {
      "given": {
        "seconds": 6.989746093749999e-7,
        "milliseconds": 0.000698974609375,
        "microseconds": 0.698974609375,
        "nanoseconds": 698.974609375
      },
      "when": {
        "seconds": 0.000011255004882812499,
        "milliseconds": 0.011255004882812501,
        "microseconds": 11.2550048828125,
        "nanoseconds": 11255.0048828125
      },
      "then": {
        "seconds": 0.004052512023925781,
        "milliseconds": 4.0525120239257815,
        "microseconds": 4052.5120239257812,
        "nanoseconds": 4052512.0239257812
      },
      "total": {
        "seconds": 0.004064466003417968,
        "milliseconds": 4.064466003417969,
        "microseconds": 4064.4660034179688,
        "nanoseconds": 4064466.0034179688
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T647198938",
    "count": 16,
    "time": 416963777851.09,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest does NOT have a when, the assertions should receive the value from the parent given",
    "behaviors": [
      "supposed",
      "when nested assertions have no given",
      "and a parent description does have a given",
      "and the nest does NOT have a when",
      "the assertions should receive the value from the parent given"
    ],
    "duration": {
      "given": {
        "seconds": 5.570068359375e-7,
        "milliseconds": 0.0005570068359375,
        "microseconds": 0.5570068359375,
        "nanoseconds": 557.0068359375
      },
      "when": {
        "seconds": 0.00000101202392578125,
        "milliseconds": 0.00101202392578125,
        "microseconds": 1.01202392578125,
        "nanoseconds": 1012.02392578125
      },
      "then": {
        "seconds": 0.004059649047851562,
        "milliseconds": 4.059649047851563,
        "microseconds": 4059.6490478515625,
        "nanoseconds": 4059649.0478515625
      },
      "total": {
        "seconds": 0.004061218078613281,
        "milliseconds": 4.061218078613281,
        "microseconds": 4061.2180786132812,
        "nanoseconds": 4061218.0786132812
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T3050652413",
    "count": 17,
    "time": 416963777859.04,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest does NOT have a when, and there's more nesting, with neither when's nor given's, the assertions should receive the value from the parent given",
    "behaviors": [
      "supposed",
      "when nested assertions have no given",
      "and a parent description does have a given",
      "and the nest does NOT have a when",
      "and there's more nesting",
      "with neither when's nor given's",
      "the assertions should receive the value from the parent given"
    ],
    "duration": {
      "given": {
        "seconds": 5.4302978515625e-7,
        "milliseconds": 0.00054302978515625,
        "microseconds": 0.54302978515625,
        "nanoseconds": 543.02978515625
      },
      "when": {
        "seconds": 7.839965820312499e-7,
        "milliseconds": 0.00078399658203125,
        "microseconds": 0.78399658203125,
        "nanoseconds": 783.99658203125
      },
      "then": {
        "seconds": 0.004067117980957031,
        "milliseconds": 4.067117980957032,
        "microseconds": 4067.1179809570312,
        "nanoseconds": 4067117.9809570312
      },
      "total": {
        "seconds": 0.004068445007324219,
        "milliseconds": 4.068445007324219,
        "microseconds": 4068.4450073242188,
        "nanoseconds": 4068445.0073242188
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T67986680",
    "count": 18,
    "time": 416963777868.181,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest does NOT have a when, and there's more nesting, with a given, but not a when, the assertions should receive the value from the overriding given",
    "behaviors": [
      "supposed",
      "when nested assertions have no given",
      "and a parent description does have a given",
      "and the nest does NOT have a when",
      "and there's more nesting",
      "with a given, but not a when",
      "the assertions should receive the value from the overriding given"
    ],
    "duration": {
      "given": {
        "seconds": 0.00000749298095703125,
        "milliseconds": 0.00749298095703125,
        "microseconds": 7.49298095703125,
        "nanoseconds": 7492.98095703125
      },
      "when": {
        "seconds": 9.0899658203125e-7,
        "milliseconds": 0.00090899658203125,
        "microseconds": 0.90899658203125,
        "nanoseconds": 908.99658203125
      },
      "then": {
        "seconds": 0.004072859008789062,
        "milliseconds": 4.072859008789062,
        "microseconds": 4072.8590087890625,
        "nanoseconds": 4072859.0087890625
      },
      "total": {
        "seconds": 0.004081260986328125,
        "milliseconds": 4.081260986328124,
        "microseconds": 4081.260986328125,
        "nanoseconds": 4081260.986328125
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T3994234473",
    "count": 19,
    "time": 416963777875.998,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest does NOT have a when, and there's more nesting, with a given, but not a when, in deeper nests, the assertions should receive the value from the overriding given",
    "behaviors": [
      "supposed",
      "when nested assertions have no given",
      "and a parent description does have a given",
      "and the nest does NOT have a when",
      "and there's more nesting",
      "with a given, but not a when",
      "in deeper nests",
      "the assertions should receive the value from the overriding given"
    ],
    "duration": {
      "given": {
        "seconds": 5.4998779296875e-7,
        "milliseconds": 0.0005499877929687501,
        "microseconds": 0.54998779296875,
        "nanoseconds": 549.98779296875
      },
      "when": {
        "seconds": 8.020019531249999e-7,
        "milliseconds": 0.000802001953125,
        "microseconds": 0.802001953125,
        "nanoseconds": 802.001953125
      },
      "then": {
        "seconds": 0.004080071960449219,
        "milliseconds": 4.080071960449219,
        "microseconds": 4080.0719604492188,
        "nanoseconds": 4080071.9604492188
      },
      "total": {
        "seconds": 0.004081423950195312,
        "milliseconds": 4.081423950195313,
        "microseconds": 4081.4239501953125,
        "nanoseconds": 4081423.9501953125
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T1489044925",
    "count": 20,
    "time": 416963777883.804,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when nested assertions have givens, and they stem from a parent with a when (1), it should pass the child given to the parent when",
    "behaviors": [
      "supposed",
      "when nested assertions have givens",
      "and they stem from a parent with a when (1)",
      "it should pass the child given to the parent when"
    ],
    "duration": {
      "given": {
        "seconds": 0.0000064549560546874994,
        "milliseconds": 0.0064549560546875,
        "microseconds": 6.4549560546875,
        "nanoseconds": 6454.9560546875
      },
      "when": {
        "seconds": 0.000011497009277343749,
        "milliseconds": 0.01149700927734375,
        "microseconds": 11.49700927734375,
        "nanoseconds": 11497.00927734375
      },
      "then": {
        "seconds": 0.004087397033691406,
        "milliseconds": 4.087397033691406,
        "microseconds": 4087.3970336914062,
        "nanoseconds": 4087397.0336914062
      },
      "total": {
        "seconds": 0.004105348999023437,
        "milliseconds": 4.1053489990234375,
        "microseconds": 4105.3489990234375,
        "nanoseconds": 4105348.9990234375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T3019135220",
    "count": 21,
    "time": 416963777893.049,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when nested assertions have givens, and they stem from a parent with a when (42), it should pass the child given to the parent when",
    "behaviors": [
      "supposed",
      "when nested assertions have givens",
      "and they stem from a parent with a when (42)",
      "it should pass the child given to the parent when"
    ],
    "duration": {
      "given": {
        "seconds": 0.000006398986816406249,
        "milliseconds": 0.0063989868164062505,
        "microseconds": 6.39898681640625,
        "nanoseconds": 6398.98681640625
      },
      "when": {
        "seconds": 9.160156249999999e-7,
        "milliseconds": 0.0009160156250000001,
        "microseconds": 0.916015625,
        "nanoseconds": 916.015625
      },
      "then": {
        "seconds": 0.004096163024902344,
        "milliseconds": 4.096163024902344,
        "microseconds": 4096.163024902344,
        "nanoseconds": 4096163.0249023438
      },
      "total": {
        "seconds": 0.00410347802734375,
        "milliseconds": 4.10347802734375,
        "microseconds": 4103.47802734375,
        "nanoseconds": 4103478.02734375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T3627335037",
    "count": 22,
    "time": 416963777900.887,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when nested assertions have givens (make-batch if (!when && parentWhen && !whenIsInheritedGiven)), it should equal 84",
    "behaviors": [
      "supposed",
      "when nested assertions have givens (make-batch if (!when && parentWhen && !whenIsInheritedGiven))",
      "it should equal 84"
    ],
    "duration": {
      "given": {
        "seconds": 0.000006916015625,
        "milliseconds": 0.006916015625,
        "microseconds": 6.916015625,
        "nanoseconds": 6916.015625
      },
      "when": {
        "seconds": 0.00001143499755859375,
        "milliseconds": 0.01143499755859375,
        "microseconds": 11.43499755859375,
        "nanoseconds": 11434.99755859375
      },
      "then": {
        "seconds": 0.004103431030273438,
        "milliseconds": 4.103431030273438,
        "microseconds": 4103.4310302734375,
        "nanoseconds": 4103431.0302734375
      },
      "total": {
        "seconds": 0.004121782043457031,
        "milliseconds": 4.121782043457031,
        "microseconds": 4121.782043457031,
        "nanoseconds": 4121782.0434570312
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T3508928479",
    "count": 23,
    "time": 416963777908.536,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when nested assertions have givens (make-batch if (!when && parentWhen && !whenIsInheritedGiven)), and they stem from a parent with a when, it should equal 2",
    "behaviors": [
      "supposed",
      "when nested assertions have givens (make-batch if (!when && parentWhen && !whenIsInheritedGiven))",
      "and they stem from a parent with a when",
      "it should equal 2"
    ],
    "duration": {
      "given": {
        "seconds": 0.0000063060302734375,
        "milliseconds": 0.0063060302734375,
        "microseconds": 6.3060302734375,
        "nanoseconds": 6306.0302734375
      },
      "when": {
        "seconds": 7.450561523437499e-7,
        "milliseconds": 0.00074505615234375,
        "microseconds": 0.74505615234375,
        "nanoseconds": 745.05615234375
      },
      "then": {
        "seconds": 0.004110585998535156,
        "milliseconds": 4.110585998535156,
        "microseconds": 4110.585998535156,
        "nanoseconds": 4110585.9985351562
      },
      "total": {
        "seconds": 0.004117637084960938,
        "milliseconds": 4.117637084960937,
        "microseconds": 4117.6370849609375,
        "nanoseconds": 4117637.0849609375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T335109675",
    "count": 24,
    "time": 416963777916.319,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when nested assertions have givens (make-batch if (!when && given)), it should equal 42",
    "behaviors": [
      "supposed",
      "when nested assertions have givens (make-batch if (!when && given))",
      "it should equal 42"
    ],
    "duration": {
      "given": {
        "seconds": 0.0000062830200195312494,
        "milliseconds": 0.00628302001953125,
        "microseconds": 6.28302001953125,
        "nanoseconds": 6283.02001953125
      },
      "when": {
        "seconds": 0.00000256298828125,
        "milliseconds": 0.00256298828125,
        "microseconds": 2.56298828125,
        "nanoseconds": 2562.98828125
      },
      "then": {
        "seconds": 0.004117891967773437,
        "milliseconds": 4.117891967773438,
        "microseconds": 4117.8919677734375,
        "nanoseconds": 4117891.9677734375
      },
      "total": {
        "seconds": 0.004126737976074218,
        "milliseconds": 4.126737976074219,
        "microseconds": 4126.737976074219,
        "nanoseconds": 4126737.9760742188
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T3699574721",
    "count": 25,
    "time": 416963777925.764,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when nested assertions have givens (make-batch if (!when && given)), and they stem from a parent with a when, it should equal 1",
    "behaviors": [
      "supposed",
      "when nested assertions have givens (make-batch if (!when && given))",
      "and they stem from a parent with a when",
      "it should equal 1"
    ],
    "duration": {
      "given": {
        "seconds": 0.00000625299072265625,
        "milliseconds": 0.00625299072265625,
        "microseconds": 6.25299072265625,
        "nanoseconds": 6252.99072265625
      },
      "when": {
        "seconds": 8.4002685546875e-7,
        "milliseconds": 0.00084002685546875,
        "microseconds": 0.84002685546875,
        "nanoseconds": 840.02685546875
      },
      "then": {
        "seconds": 0.0041268349609375,
        "milliseconds": 4.1268349609375,
        "microseconds": 4126.8349609375,
        "nanoseconds": 4126834.9609375
      },
      "total": {
        "seconds": 0.004133927978515625,
        "milliseconds": 4.133927978515625,
        "microseconds": 4133.927978515625,
        "nanoseconds": 4133927.978515625
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3826980467",
    "testId": "T643190769",
    "count": 103,
    "time": 416963800230.664,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "supposed, when the `when` is asynchronous, it should not execute the assertions until the when is resolved",
    "behaviors": [
      "supposed",
      "when the `when` is asynchronous",
      "it should not execute the assertions until the when is resolved"
    ],
    "duration": {
      "given": {
        "seconds": 6.1700439453125e-7,
        "milliseconds": 0.00061700439453125,
        "microseconds": 0.61700439453125,
        "nanoseconds": 617.00439453125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.000033328979492187496,
        "milliseconds": 0.0333289794921875,
        "microseconds": 33.3289794921875,
        "nanoseconds": 33328.9794921875
      },
      "total": {
        "seconds": 0.00003394598388671875,
        "milliseconds": 0.03394598388671875,
        "microseconds": 33.94598388671875,
        "nanoseconds": 33945.98388671875
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B922081056",
    "testId": "T411392620",
    "count": 83,
    "time": 416963795633.605,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "assertion output, when an assertion passes, and returns an object with a `log` property, it should include the log in the event",
    "behaviors": [
      "assertion output",
      "when an assertion passes, and returns an object with a `log` property",
      "it should include the log in the event"
    ],
    "duration": {
      "given": {
        "seconds": 5.830078125e-7,
        "milliseconds": 0.0005830078125,
        "microseconds": 0.5830078125,
        "nanoseconds": 583.0078125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0010954959716796874,
        "milliseconds": 1.0954959716796875,
        "microseconds": 1095.4959716796875,
        "nanoseconds": 1095495.9716796875
      },
      "total": {
        "seconds": 0.0010960789794921873,
        "milliseconds": 1.0960789794921875,
        "microseconds": 1096.0789794921875,
        "nanoseconds": 1096078.9794921875
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B922081056",
    "testId": "T3705649512",
    "count": 85,
    "time": 416963795824.597,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "assertion output, when an assertion passes, and returns a Promise with a `log` property, it should include the log in the event",
    "behaviors": [
      "assertion output",
      "when an assertion passes, and returns a Promise with a `log` property",
      "it should include the log in the event"
    ],
    "duration": {
      "given": {
        "seconds": 6.9500732421875e-7,
        "milliseconds": 0.00069500732421875,
        "microseconds": 0.69500732421875,
        "nanoseconds": 695.00732421875
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0001814959716796875,
        "milliseconds": 0.1814959716796875,
        "microseconds": 181.4959716796875,
        "nanoseconds": 181495.9716796875
      },
      "total": {
        "seconds": 0.00018219097900390625,
        "milliseconds": 0.18219097900390627,
        "microseconds": 182.19097900390625,
        "nanoseconds": 182190.97900390625
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1675426431",
    "testId": "T754121129",
    "count": 60,
    "time": 416963794539.101,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "missing when, when there is no when function, it should still execute the assertions",
    "behaviors": [
      "missing when",
      "when there is no when function",
      "it should still execute the assertions"
    ],
    "duration": {
      "given": {
        "seconds": 5.1104736328125e-7,
        "milliseconds": 0.00051104736328125,
        "microseconds": 0.51104736328125,
        "nanoseconds": 511.04736328125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0004230140380859375,
        "milliseconds": 0.4230140380859375,
        "microseconds": 423.0140380859375,
        "nanoseconds": 423014.0380859375
      },
      "total": {
        "seconds": 0.0004235250854492187,
        "milliseconds": 0.42352508544921874,
        "microseconds": 423.52508544921875,
        "nanoseconds": 423525.08544921875
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T206888825",
    "count": 43,
    "time": 416963793744.518,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a behavior is skipped, it should NOT run the behavior",
    "behaviors": [
      "skipping tests",
      "when a behavior is skipped",
      "it should NOT run the behavior"
    ],
    "duration": {
      "given": {
        "seconds": 5.599975585937499e-7,
        "milliseconds": 0.00055999755859375,
        "microseconds": 0.55999755859375,
        "nanoseconds": 559.99755859375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0006294149780273437,
        "milliseconds": 0.6294149780273438,
        "microseconds": 629.4149780273438,
        "nanoseconds": 629414.9780273438
      },
      "total": {
        "seconds": 0.0006299749755859375,
        "milliseconds": 0.6299749755859375,
        "microseconds": 629.9749755859375,
        "nanoseconds": 629974.9755859375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T3410282755",
    "count": 44,
    "time": 416963793769.28,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a behavior is skipped, it should NOT run any assertions",
    "behaviors": [
      "skipping tests",
      "when a behavior is skipped",
      "it should NOT run any assertions"
    ],
    "duration": {
      "given": {
        "seconds": 5.599975585937499e-7,
        "milliseconds": 0.00055999755859375,
        "microseconds": 0.55999755859375,
        "nanoseconds": 559.99755859375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0006532860107421875,
        "milliseconds": 0.6532860107421875,
        "microseconds": 653.2860107421875,
        "nanoseconds": 653286.0107421875
      },
      "total": {
        "seconds": 0.0006538460083007813,
        "milliseconds": 0.6538460083007812,
        "microseconds": 653.8460083007812,
        "nanoseconds": 653846.0083007812
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T2221856548",
    "count": 45,
    "time": 416963793785.226,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a behavior is skipped, it should count the assertions that were skipped",
    "behaviors": [
      "skipping tests",
      "when a behavior is skipped",
      "it should count the assertions that were skipped"
    ],
    "duration": {
      "given": {
        "seconds": 5.599975585937499e-7,
        "milliseconds": 0.00055999755859375,
        "microseconds": 0.55999755859375,
        "nanoseconds": 559.99755859375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0006686110229492188,
        "milliseconds": 0.6686110229492188,
        "microseconds": 668.6110229492188,
        "nanoseconds": 668611.0229492188
      },
      "total": {
        "seconds": 0.0006691710205078126,
        "milliseconds": 0.6691710205078125,
        "microseconds": 669.1710205078125,
        "nanoseconds": 669171.0205078125
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T3722697963",
    "count": 46,
    "time": 416963793793.725,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a behavior is skipped, it should produce outcomes with a status of SKIPPED",
    "behaviors": [
      "skipping tests",
      "when a behavior is skipped",
      "it should produce outcomes with a status of SKIPPED"
    ],
    "duration": {
      "given": {
        "seconds": 5.599975585937499e-7,
        "milliseconds": 0.00055999755859375,
        "microseconds": 0.55999755859375,
        "nanoseconds": 559.99755859375
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0006764879760742188,
        "milliseconds": 0.6764879760742187,
        "microseconds": 676.4879760742188,
        "nanoseconds": 676487.9760742188
      },
      "total": {
        "seconds": 0.0006770479736328126,
        "milliseconds": 0.6770479736328124,
        "microseconds": 677.0479736328125,
        "nanoseconds": 677047.9736328125
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T632654725",
    "count": 47,
    "time": 416963793800.438,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a named behavior is skipped, it should NOT run the behavior",
    "behaviors": [
      "skipping tests",
      "when a named behavior is skipped",
      "it should NOT run the behavior"
    ],
    "duration": {
      "given": {
        "seconds": 5.0396728515625e-7,
        "milliseconds": 0.00050396728515625,
        "microseconds": 0.50396728515625,
        "nanoseconds": 503.96728515625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0006826409912109374,
        "milliseconds": 0.6826409912109375,
        "microseconds": 682.6409912109375,
        "nanoseconds": 682640.9912109375
      },
      "total": {
        "seconds": 0.0006831449584960937,
        "milliseconds": 0.6831449584960937,
        "microseconds": 683.1449584960938,
        "nanoseconds": 683144.9584960938
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T242631415",
    "count": 48,
    "time": 416963793809.165,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a named behavior is skipped, it should NOT run any assertions",
    "behaviors": [
      "skipping tests",
      "when a named behavior is skipped",
      "it should NOT run any assertions"
    ],
    "duration": {
      "given": {
        "seconds": 5.0396728515625e-7,
        "milliseconds": 0.00050396728515625,
        "microseconds": 0.50396728515625,
        "nanoseconds": 503.96728515625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.000690885986328125,
        "milliseconds": 0.690885986328125,
        "microseconds": 690.885986328125,
        "nanoseconds": 690885.986328125
      },
      "total": {
        "seconds": 0.0006913899536132813,
        "milliseconds": 0.6913899536132813,
        "microseconds": 691.3899536132812,
        "nanoseconds": 691389.9536132812
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T2116234970",
    "count": 49,
    "time": 416963793815.842,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a named behavior is skipped, it should count the assertions that were skipped",
    "behaviors": [
      "skipping tests",
      "when a named behavior is skipped",
      "it should count the assertions that were skipped"
    ],
    "duration": {
      "given": {
        "seconds": 5.0396728515625e-7,
        "milliseconds": 0.00050396728515625,
        "microseconds": 0.50396728515625,
        "nanoseconds": 503.96728515625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0006970899658203124,
        "milliseconds": 0.6970899658203125,
        "microseconds": 697.0899658203125,
        "nanoseconds": 697089.9658203125
      },
      "total": {
        "seconds": 0.0006975939331054687,
        "milliseconds": 0.6975939331054687,
        "microseconds": 697.5939331054688,
        "nanoseconds": 697593.9331054688
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T3686174769",
    "count": 50,
    "time": 416963793821.79,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a named behavior is skipped, it should produce outcomes with a status of SKIPPED",
    "behaviors": [
      "skipping tests",
      "when a named behavior is skipped",
      "it should produce outcomes with a status of SKIPPED"
    ],
    "duration": {
      "given": {
        "seconds": 5.0396728515625e-7,
        "milliseconds": 0.00050396728515625,
        "microseconds": 0.50396728515625,
        "nanoseconds": 503.96728515625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0007025509643554688,
        "milliseconds": 0.7025509643554687,
        "microseconds": 702.5509643554688,
        "nanoseconds": 702550.9643554688
      },
      "total": {
        "seconds": 0.000703054931640625,
        "milliseconds": 0.7030549316406249,
        "microseconds": 703.054931640625,
        "nanoseconds": 703054.931640625
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T3626082049",
    "count": 62,
    "time": 416963795471.645,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when an assertion is skipped, it should run the behavior",
    "behaviors": [
      "skipping tests",
      "when an assertion is skipped",
      "it should run the behavior"
    ],
    "duration": {
      "given": {
        "seconds": 5.830078125e-7,
        "milliseconds": 0.0005830078125,
        "microseconds": 0.5830078125,
        "nanoseconds": 583.0078125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0010690790405273438,
        "milliseconds": 1.0690790405273438,
        "microseconds": 1069.0790405273438,
        "nanoseconds": 1069079.0405273438
      },
      "total": {
        "seconds": 0.0010696620483398437,
        "milliseconds": 1.0696620483398438,
        "microseconds": 1069.6620483398438,
        "nanoseconds": 1069662.0483398438
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T547674825",
    "count": 63,
    "time": 416963795488.694,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when an assertion is skipped, it should run the other assertions",
    "behaviors": [
      "skipping tests",
      "when an assertion is skipped",
      "it should run the other assertions"
    ],
    "duration": {
      "given": {
        "seconds": 5.830078125e-7,
        "milliseconds": 0.0005830078125,
        "microseconds": 0.5830078125,
        "nanoseconds": 583.0078125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00108481396484375,
        "milliseconds": 1.08481396484375,
        "microseconds": 1084.81396484375,
        "nanoseconds": 1084813.96484375
      },
      "total": {
        "seconds": 0.00108539697265625,
        "milliseconds": 1.08539697265625,
        "microseconds": 1085.39697265625,
        "nanoseconds": 1085396.97265625
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T234758359",
    "count": 64,
    "time": 416963795498.226,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when an assertion is skipped, it should NOT run the skipped assertion",
    "behaviors": [
      "skipping tests",
      "when an assertion is skipped",
      "it should NOT run the skipped assertion"
    ],
    "duration": {
      "given": {
        "seconds": 5.830078125e-7,
        "milliseconds": 0.0005830078125,
        "microseconds": 0.5830078125,
        "nanoseconds": 583.0078125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0010937260131835937,
        "milliseconds": 1.0937260131835937,
        "microseconds": 1093.7260131835938,
        "nanoseconds": 1093726.0131835938
      },
      "total": {
        "seconds": 0.0010943090209960937,
        "milliseconds": 1.0943090209960937,
        "microseconds": 1094.3090209960938,
        "nanoseconds": 1094309.0209960938
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T816738356",
    "count": 65,
    "time": 416963795505.431,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when an assertion is skipped, it should count the assertions that were skipped",
    "behaviors": [
      "skipping tests",
      "when an assertion is skipped",
      "it should count the assertions that were skipped"
    ],
    "duration": {
      "given": {
        "seconds": 5.830078125e-7,
        "milliseconds": 0.0005830078125,
        "microseconds": 0.5830078125,
        "nanoseconds": 583.0078125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0011004000244140624,
        "milliseconds": 1.1004000244140626,
        "microseconds": 1100.4000244140625,
        "nanoseconds": 1100400.0244140625
      },
      "total": {
        "seconds": 0.0011009830322265624,
        "milliseconds": 1.1009830322265626,
        "microseconds": 1100.9830322265625,
        "nanoseconds": 1100983.0322265625
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T2928585722",
    "count": 66,
    "time": 416963795511.844,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when an assertion is skipped, it should produce outcomes with a status of SKIPPED",
    "behaviors": [
      "skipping tests",
      "when an assertion is skipped",
      "it should produce outcomes with a status of SKIPPED"
    ],
    "duration": {
      "given": {
        "seconds": 5.830078125e-7,
        "milliseconds": 0.0005830078125,
        "microseconds": 0.5830078125,
        "nanoseconds": 583.0078125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00110631298828125,
        "milliseconds": 1.1063129882812501,
        "microseconds": 1106.31298828125,
        "nanoseconds": 1106312.98828125
      },
      "total": {
        "seconds": 0.00110689599609375,
        "milliseconds": 1.1068959960937501,
        "microseconds": 1106.89599609375,
        "nanoseconds": 1106895.99609375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T3145459613",
    "count": 67,
    "time": 416963795518.278,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a test is skipped using TAP's SKIP directive, it should run the behavior",
    "behaviors": [
      "skipping tests",
      "when a test is skipped using TAP's SKIP directive",
      "it should run the behavior"
    ],
    "duration": {
      "given": {
        "seconds": 5.059814453124999e-7,
        "milliseconds": 0.0005059814453125001,
        "microseconds": 0.5059814453125,
        "nanoseconds": 505.9814453125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0011122570190429688,
        "milliseconds": 1.1122570190429688,
        "microseconds": 1112.2570190429688,
        "nanoseconds": 1112257.0190429688
      },
      "total": {
        "seconds": 0.0011127630004882812,
        "milliseconds": 1.1127630004882814,
        "microseconds": 1112.7630004882812,
        "nanoseconds": 1112763.0004882812
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T1142213017",
    "count": 68,
    "time": 416963795526.097,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a test is skipped using TAP's SKIP directive, it should run the other assertions",
    "behaviors": [
      "skipping tests",
      "when a test is skipped using TAP's SKIP directive",
      "it should run the other assertions"
    ],
    "duration": {
      "given": {
        "seconds": 5.059814453124999e-7,
        "milliseconds": 0.0005059814453125001,
        "microseconds": 0.5059814453125,
        "nanoseconds": 505.9814453125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0011196029663085936,
        "milliseconds": 1.1196029663085938,
        "microseconds": 1119.6029663085938,
        "nanoseconds": 1119602.9663085938
      },
      "total": {
        "seconds": 0.001120108947753906,
        "milliseconds": 1.1201089477539063,
        "microseconds": 1120.1089477539062,
        "nanoseconds": 1120108.9477539062
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T817066554",
    "count": 69,
    "time": 416963795532.253,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a test is skipped using TAP's SKIP directive, it should NOT run the skipped assertion",
    "behaviors": [
      "skipping tests",
      "when a test is skipped using TAP's SKIP directive",
      "it should NOT run the skipped assertion"
    ],
    "duration": {
      "given": {
        "seconds": 5.059814453124999e-7,
        "milliseconds": 0.0005059814453125001,
        "microseconds": 0.5059814453125,
        "nanoseconds": 505.9814453125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0011252799682617187,
        "milliseconds": 1.1252799682617187,
        "microseconds": 1125.2799682617188,
        "nanoseconds": 1125279.9682617188
      },
      "total": {
        "seconds": 0.0011257859497070311,
        "milliseconds": 1.1257859497070313,
        "microseconds": 1125.7859497070312,
        "nanoseconds": 1125785.9497070312
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T590818120",
    "count": 70,
    "time": 416963795539.72,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a test is skipped using TAP's SKIP directive, it should count the assertions that were skipped",
    "behaviors": [
      "skipping tests",
      "when a test is skipped using TAP's SKIP directive",
      "it should count the assertions that were skipped"
    ],
    "duration": {
      "given": {
        "seconds": 5.059814453124999e-7,
        "milliseconds": 0.0005059814453125001,
        "microseconds": 0.5059814453125,
        "nanoseconds": 505.9814453125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0011322760009765623,
        "milliseconds": 1.1322760009765624,
        "microseconds": 1132.2760009765625,
        "nanoseconds": 1132276.0009765625
      },
      "total": {
        "seconds": 0.0011327819824218748,
        "milliseconds": 1.132781982421875,
        "microseconds": 1132.781982421875,
        "nanoseconds": 1132781.982421875
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T2578327884",
    "count": 71,
    "time": 416963795545.496,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a test is skipped using TAP's SKIP directive, it should produce outcomes with a status of SKIPPED",
    "behaviors": [
      "skipping tests",
      "when a test is skipped using TAP's SKIP directive",
      "it should produce outcomes with a status of SKIPPED"
    ],
    "duration": {
      "given": {
        "seconds": 5.059814453124999e-7,
        "milliseconds": 0.0005059814453125001,
        "microseconds": 0.5059814453125,
        "nanoseconds": 505.9814453125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0011375719604492186,
        "milliseconds": 1.1375719604492187,
        "microseconds": 1137.5719604492188,
        "nanoseconds": 1137571.9604492188
      },
      "total": {
        "seconds": 0.001138077941894531,
        "milliseconds": 1.1380779418945313,
        "microseconds": 1138.0779418945312,
        "nanoseconds": 1138077.9418945312
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T3300348428",
    "count": 72,
    "time": 416963795551.595,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a test is skipped using TAP's TODO directive, it should run the behavior",
    "behaviors": [
      "skipping tests",
      "when a test is skipped using TAP's TODO directive",
      "it should run the behavior"
    ],
    "duration": {
      "given": {
        "seconds": 5.0299072265625e-7,
        "milliseconds": 0.00050299072265625,
        "microseconds": 0.50299072265625,
        "nanoseconds": 502.99072265625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.00114318798828125,
        "milliseconds": 1.1431879882812501,
        "microseconds": 1143.18798828125,
        "nanoseconds": 1143187.98828125
      },
      "total": {
        "seconds": 0.0011436909790039063,
        "milliseconds": 1.1436909790039065,
        "microseconds": 1143.6909790039062,
        "nanoseconds": 1143690.9790039062
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T4151420164",
    "count": 73,
    "time": 416963795558.795,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a test is skipped using TAP's TODO directive, it should run the other assertions",
    "behaviors": [
      "skipping tests",
      "when a test is skipped using TAP's TODO directive",
      "it should run the other assertions"
    ],
    "duration": {
      "given": {
        "seconds": 5.0299072265625e-7,
        "milliseconds": 0.00050299072265625,
        "microseconds": 0.50299072265625,
        "nanoseconds": 502.99072265625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0011497130126953124,
        "milliseconds": 1.1497130126953126,
        "microseconds": 1149.7130126953125,
        "nanoseconds": 1149713.0126953125
      },
      "total": {
        "seconds": 0.0011502160034179687,
        "milliseconds": 1.150216003417969,
        "microseconds": 1150.2160034179688,
        "nanoseconds": 1150216.0034179688
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T271535009",
    "count": 74,
    "time": 416963795564.569,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a test is skipped using TAP's TODO directive, it should NOT run the skipped assertion",
    "behaviors": [
      "skipping tests",
      "when a test is skipped using TAP's TODO directive",
      "it should NOT run the skipped assertion"
    ],
    "duration": {
      "given": {
        "seconds": 5.0299072265625e-7,
        "milliseconds": 0.00050299072265625,
        "microseconds": 0.50299072265625,
        "nanoseconds": 502.99072265625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.001154920959472656,
        "milliseconds": 1.1549209594726564,
        "microseconds": 1154.9209594726562,
        "nanoseconds": 1154920.9594726562
      },
      "total": {
        "seconds": 0.0011554239501953124,
        "milliseconds": 1.1554239501953127,
        "microseconds": 1155.4239501953125,
        "nanoseconds": 1155423.9501953125
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T2482641236",
    "count": 75,
    "time": 416963795569.914,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a test is skipped using TAP's TODO directive, it should count the assertions that were skipped",
    "behaviors": [
      "skipping tests",
      "when a test is skipped using TAP's TODO directive",
      "it should count the assertions that were skipped"
    ],
    "duration": {
      "given": {
        "seconds": 5.0299072265625e-7,
        "milliseconds": 0.00050299072265625,
        "microseconds": 0.50299072265625,
        "nanoseconds": 502.99072265625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0011596380004882812,
        "milliseconds": 1.1596380004882814,
        "microseconds": 1159.6380004882812,
        "nanoseconds": 1159638.0004882812
      },
      "total": {
        "seconds": 0.0011601409912109376,
        "milliseconds": 1.1601409912109377,
        "microseconds": 1160.1409912109375,
        "nanoseconds": 1160140.9912109375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2554623017",
    "testId": "T1381204779",
    "count": 76,
    "time": 416963795575.515,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "skipping tests, when a test is skipped using TAP's TODO directive, it should produce outcomes with a status of SKIPPED",
    "behaviors": [
      "skipping tests",
      "when a test is skipped using TAP's TODO directive",
      "it should produce outcomes with a status of SKIPPED"
    ],
    "duration": {
      "given": {
        "seconds": 5.0299072265625e-7,
        "milliseconds": 0.00050299072265625,
        "microseconds": 0.50299072265625,
        "nanoseconds": 502.99072265625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.0011647620239257812,
        "milliseconds": 1.1647620239257812,
        "microseconds": 1164.7620239257812,
        "nanoseconds": 1164762.0239257812
      },
      "total": {
        "seconds": 0.0011652650146484376,
        "milliseconds": 1.1652650146484376,
        "microseconds": 1165.2650146484375,
        "nanoseconds": 1165265.0146484375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3106365075",
    "testId": "T1579980829",
    "count": 29,
    "time": 416963780218.324,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "slow test 0, it should be delayed",
    "behaviors": [
      "slow test 0",
      "it should be delayed"
    ],
    "duration": {
      "given": {
        "seconds": 5.74951171875e-7,
        "milliseconds": 0.000574951171875,
        "microseconds": 0.574951171875,
        "nanoseconds": 574.951171875
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.006418902954101562,
        "milliseconds": 6.418902954101562,
        "microseconds": 6418.9029541015625,
        "nanoseconds": 6418902.9541015625
      },
      "total": {
        "seconds": 0.006419477905273438,
        "milliseconds": 6.419477905273437,
        "microseconds": 6419.4779052734375,
        "nanoseconds": 6419477.9052734375
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1160732269",
    "testId": "T2651701043",
    "count": 86,
    "time": 416963796215.993,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "slow test 1, it should be delayed",
    "behaviors": [
      "slow test 1",
      "it should be delayed"
    ],
    "duration": {
      "given": {
        "seconds": 5.0103759765625e-7,
        "milliseconds": 0.00050103759765625,
        "microseconds": 0.50103759765625,
        "nanoseconds": 501.03759765625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.022414943969726563,
        "milliseconds": 22.41494396972656,
        "microseconds": 22414.943969726562,
        "nanoseconds": 22414943.969726562
      },
      "total": {
        "seconds": 0.02241544500732422,
        "milliseconds": 22.415445007324216,
        "microseconds": 22415.44500732422,
        "nanoseconds": 22415445.00732422
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B3897443046",
    "testId": "T1607347637",
    "count": 94,
    "time": 416963797827.277,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "slow test 2, it should be delayed",
    "behaviors": [
      "slow test 2",
      "it should be delayed"
    ],
    "duration": {
      "given": {
        "seconds": 5.040283203125e-7,
        "milliseconds": 0.0005040283203125001,
        "microseconds": 0.5040283203125,
        "nanoseconds": 504.0283203125
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.02402564794921875,
        "milliseconds": 24.02564794921875,
        "microseconds": 24025.64794921875,
        "nanoseconds": 24025647.94921875
      },
      "total": {
        "seconds": 0.024026151977539063,
        "milliseconds": 24.02615197753906,
        "microseconds": 24026.151977539062,
        "nanoseconds": 24026151.977539062
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B1734145665",
    "testId": "T1552166806",
    "count": 105,
    "time": 416963807921.954,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "slow test 3, it should be delayed",
    "behaviors": [
      "slow test 3",
      "it should be delayed"
    ],
    "duration": {
      "given": {
        "seconds": 5.0701904296875e-7,
        "milliseconds": 0.00050701904296875,
        "microseconds": 0.50701904296875,
        "nanoseconds": 507.01904296875
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.03411984796142578,
        "milliseconds": 34.11984796142578,
        "microseconds": 34119.84796142578,
        "nanoseconds": 34119847.96142578
      },
      "total": {
        "seconds": 0.034120354980468746,
        "milliseconds": 34.120354980468754,
        "microseconds": 34120.35498046875,
        "nanoseconds": 34120354.98046875
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "batchId": "B2703165877",
    "testId": "T1349720967",
    "count": 106,
    "time": 416963819215.683,
    "type": "TEST",
    "status": "PASSED",
    "behavior": "slow test 4, it should be delayed",
    "behaviors": [
      "slow test 4",
      "it should be delayed"
    ],
    "duration": {
      "given": {
        "seconds": 5.009765625e-7,
        "milliseconds": 0.0005009765625,
        "microseconds": 0.5009765625,
        "nanoseconds": 500.9765625
      },
      "when": {
        "seconds": -1,
        "milliseconds": -1,
        "microseconds": -1,
        "nanoseconds": -1
      },
      "then": {
        "seconds": 0.04541310296630859,
        "milliseconds": 45.41310296630859,
        "microseconds": 45413.102966308594,
        "nanoseconds": 45413102.966308594
      },
      "total": {
        "seconds": 0.04541360394287109,
        "milliseconds": 45.41360394287109,
        "microseconds": 45413.603942871094,
        "nanoseconds": 45413603.942871094
      }
    }
  }
},
{
  "event": {
    "suiteId": "supposed-tests",
    "time": 416963819510.196,
    "type": "END",
    "plan": {
      "count": 106,
      "completed": 106,
      "batches": [
        {
          "batchId": "B3445501094",
          "theories": [
            {
              "id": "B3445501094",
              "assertions": [
                {
                  "id": "T234613271",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when a runner is configured to match a different working directory",
                    "it should find and run those tests"
                  ],
                  "behavior": "DefaultDiscoverer, when a runner is configured to match a different working directory, it should find and run those tests",
                  "skipped": false
                },
                {
                  "id": "T2979873516",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when a runner is configured to match a different working directory",
                    "the config that is returned should have the overrides"
                  ],
                  "behavior": "DefaultDiscoverer, when a runner is configured to match a different working directory, the config that is returned should have the overrides",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1499267160",
              "assertions": [
                {
                  "id": "T1762544061",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when a runner is configured to match a different naming convention, using a regular expression",
                    "it should find and run those tests"
                  ],
                  "behavior": "DefaultDiscoverer, when a runner is configured to match a different naming convention, using a regular expression, it should find and run those tests",
                  "skipped": false
                },
                {
                  "id": "T2111249353",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when a runner is configured to match a different naming convention, using a regular expression",
                    "the config that is returned should have the overrides"
                  ],
                  "behavior": "DefaultDiscoverer, when a runner is configured to match a different naming convention, using a regular expression, the config that is returned should have the overrides",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B4047296362",
              "assertions": [
                {
                  "id": "T2009783305",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when a runner is configured to match a different naming convention, using a test function",
                    "it should find and run those tests"
                  ],
                  "behavior": "DefaultDiscoverer, when a runner is configured to match a different naming convention, using a test function, it should find and run those tests",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1687685004",
              "assertions": [
                {
                  "id": "T872280371",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "it should inject the suite that is being run"
                  ],
                  "behavior": "DefaultDiscoverer, it should inject the suite that is being run",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2576357904",
              "assertions": [
                {
                  "id": "T3108099732",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when a runner is configured to ignore a directory, using a regular expression",
                    "it should not find tests that directory"
                  ],
                  "behavior": "DefaultDiscoverer, when a runner is configured to ignore a directory, using a regular expression, it should not find tests that directory",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B620042245",
              "assertions": [
                {
                  "id": "T272289404",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when a runner is configured to ignore a directory, using a test function",
                    "it should not find tests that directory"
                  ],
                  "behavior": "DefaultDiscoverer, when a runner is configured to ignore a directory, using a test function, it should not find tests that directory",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B637957585",
              "assertions": [
                {
                  "id": "T1935099767",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when a runner is configured to ignore a file path",
                    "it should not find tests that directory"
                  ],
                  "behavior": "DefaultDiscoverer, when a runner is configured to ignore a file path, it should not find tests that directory",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B4004465804",
              "assertions": [
                {
                  "id": "T3986766525",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when the runner executes a test that doesn't support injection",
                    "it should execute those files, but will not be able to report findings correctly"
                  ],
                  "behavior": "DefaultDiscoverer, when the runner executes a test that doesn't support injection, it should execute those files, but will not be able to report findings correctly",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2276411264",
              "assertions": [
                {
                  "id": "T1666834789",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "when the runner executes a test that doesn't return a promise",
                    "it should execute those files, but will not be able to report findings correctly"
                  ],
                  "behavior": "DefaultDiscoverer, when the runner executes a test that doesn't return a promise, it should execute those files, but will not be able to report findings correctly",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B747281638",
              "assertions": [
                {
                  "id": "T3601344453",
                  "behaviors": [
                    "DefaultDiscoverer",
                    "it should walk the tree",
                    "and find specs in any folder within the working directory, and the directories"
                  ],
                  "behavior": "DefaultDiscoverer, it should walk the tree, and find specs in any folder within the working directory, and the directories",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B1780998498",
          "theories": [
            {
              "id": "B1780998498",
              "assertions": [
                {
                  "id": "T3832517023",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with a timeout",
                    "it should use the configured timeout"
                  ],
                  "behavior": "Suite, when a new suite is created with a timeout, it should use the configured timeout",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1248606140",
              "assertions": [
                {
                  "id": "T3858743262",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with an assertion library",
                    "it should use the configured assertion library"
                  ],
                  "behavior": "Suite, when a new suite is created with an assertion library, it should use the configured assertion library",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3749209608",
              "assertions": [
                {
                  "id": "T833920087",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with a reporter name",
                    "it should use the configured reporter"
                  ],
                  "behavior": "Suite, when a new suite is created with a reporter name, it should use the configured reporter",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B587613541",
              "assertions": [
                {
                  "id": "T3574369160",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with a reporter name",
                    "# TODO and the reporter is unknown",
                    "it should use the default reporter"
                  ],
                  "behavior": "Suite, when a new suite is created with a reporter name, # TODO and the reporter is unknown, it should use the default reporter",
                  "skipped": true
                }
              ],
              "skipped": true
            },
            {
              "id": "B3001435077",
              "assertions": [
                {
                  "id": "T2339922183",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with multiple reporters",
                    "it should use all configured reporters"
                  ],
                  "behavior": "Suite, when a new suite is created with multiple reporters, it should use all configured reporters",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2586777907",
              "assertions": [
                {
                  "id": "T1305431340",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with a reporter (legacy: `{ report (event: ITestEvent): Promise<void> }`)",
                    "it should use the configured reporter"
                  ],
                  "behavior": "Suite, when a new suite is created with a reporter (legacy: `{ report (event: ITestEvent): Promise<void> }`), it should use the configured reporter",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2710306180",
              "assertions": [
                {
                  "id": "T2076592319",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with a reporter (`{ write (event: ITestEvent): Promise<void> }`)",
                    "it should use the configured reporter"
                  ],
                  "behavior": "Suite, when a new suite is created with a reporter (`{ write (event: ITestEvent): Promise<void> }`), it should use the configured reporter",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B991700520",
              "assertions": [
                {
                  "id": "T4198641560",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with a reporter (`(event: ITestEvent): Promise<void>`)",
                    "it should use the configured reporter"
                  ],
                  "behavior": "Suite, when a new suite is created with a reporter (`(event: ITestEvent): Promise<void>`), it should use the configured reporter",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1618940543",
              "assertions": [
                {
                  "id": "T3199713793",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with given and when synonyms",
                    "it should use the configured synonyms"
                  ],
                  "behavior": "Suite, when a new suite is created with given and when synonyms, it should use the configured synonyms",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3157662360",
              "assertions": [
                {
                  "id": "T2583312209",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with given and when synonyms",
                    "and the synonyms include empty strings",
                    "it should NOT use the configured synonyms"
                  ],
                  "behavior": "Suite, when a new suite is created with given and when synonyms, and the synonyms include empty strings, it should NOT use the configured synonyms",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B666408622",
              "assertions": [
                {
                  "id": "T3856250700",
                  "behaviors": [
                    "Suite",
                    "when a new suite is created with given and when synonyms",
                    "and the synonyms include non-strings",
                    "it should NOT use the configured synonyms"
                  ],
                  "behavior": "Suite, when a new suite is created with given and when synonyms, and the synonyms include non-strings, it should NOT use the configured synonyms",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B738634920",
          "theories": [
            {
              "id": "B738634920",
              "assertions": [
                {
                  "id": "T781209833",
                  "behaviors": [
                    "assertion styles",
                    "when the assertions don't curry",
                    "it should support one big func"
                  ],
                  "behavior": "assertion styles, when the assertions don't curry, it should support one big func",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1938315815",
              "assertions": [
                {
                  "id": "T1876945275",
                  "behaviors": [
                    "assertion styles",
                    "when the assertions curry",
                    "it should support currying"
                  ],
                  "behavior": "assertion styles, when the assertions curry, it should support currying",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2206470807",
              "assertions": [
                {
                  "id": "T234034953",
                  "behaviors": [
                    "assertion styles",
                    "when the assertions ignore the results of when",
                    "it should support just accepting the assertion library"
                  ],
                  "behavior": "assertion styles, when the assertions ignore the results of when, it should support just accepting the assertion library",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B642265724",
          "theories": [
            {
              "id": "B642265724",
              "assertions": [
                {
                  "id": "T4097946667",
                  "behaviors": [
                    "async tests",
                    "when given returns a promise",
                    "it should resolve the promise"
                  ],
                  "behavior": "async tests, when given returns a promise, it should resolve the promise",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2041676996",
              "assertions": [
                {
                  "id": "T3428553742",
                  "behaviors": [
                    "async tests",
                    "when given returns a value (not a promise)",
                    "it should resolve the value"
                  ],
                  "behavior": "async tests, when given returns a value (not a promise), it should resolve the value",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3016576560",
              "assertions": [
                {
                  "id": "T1948043456",
                  "behaviors": [
                    "async tests",
                    "when when returns a promise",
                    "it should resolve the promise"
                  ],
                  "behavior": "async tests, when when returns a promise, it should resolve the promise",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3783600124",
              "assertions": [
                {
                  "id": "T4055811011",
                  "behaviors": [
                    "async tests",
                    "when when returns a value (not a promise)",
                    "it should resolve the value"
                  ],
                  "behavior": "async tests, when when returns a value (not a promise), it should resolve the value",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1098551706",
              "assertions": [
                {
                  "id": "T2758195184",
                  "behaviors": [
                    "async tests",
                    "when an assertion returns a promise",
                    "it should run the asserion asynchronously"
                  ],
                  "behavior": "async tests, when an assertion returns a promise, it should run the asserion asynchronously",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1208658903",
              "assertions": [
                {
                  "id": "T286230725",
                  "behaviors": [
                    "async tests",
                    "when an assertion uses async await",
                    "it should run the asserion asynchronously"
                  ],
                  "behavior": "async tests, when an assertion uses async await, it should run the asserion asynchronously",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B4113453863",
          "theories": [
            {
              "id": "B4113453863",
              "assertions": [
                {
                  "id": "T1192774473",
                  "behaviors": [
                    "ava and tape compatibility",
                    "when a test is described, using the ava and tape syntax",
                    "it should run the tests"
                  ],
                  "behavior": "ava and tape compatibility, when a test is described, using the ava and tape syntax, it should run the tests",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3995410114",
              "assertions": [
                {
                  "id": "T1487094483",
                  "behaviors": [
                    "ava and tape compatibility",
                    "when a test is described, using the ava and tape syntax",
                    "and it does not have a description",
                    "it should run the tests"
                  ],
                  "behavior": "ava and tape compatibility, when a test is described, using the ava and tape syntax, and it does not have a description, it should run the tests",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B947630628",
              "assertions": [
                {
                  "id": "T1581490773",
                  "behaviors": [
                    "ava and tape compatibility",
                    "when multiple ava styles tests are added to an object",
                    "it should provide a way to group tests in a suite, with a single execution"
                  ],
                  "behavior": "ava and tape compatibility, when multiple ava styles tests are added to an object, it should provide a way to group tests in a suite, with a single execution",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B3754655697",
          "theories": [
            {
              "id": "B3754655697",
              "assertions": [
                {
                  "id": "T3746640873",
                  "behaviors": [
                    "given different styles",
                    "AAA",
                    "when arrange, act, and assert(s) exist",
                    "given should produce to when, which should produce to the assertions"
                  ],
                  "behavior": "given different styles, AAA, when arrange, act, and assert(s) exist, given should produce to when, which should produce to the assertions",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B4046180956",
              "assertions": [
                {
                  "id": "T2869232150",
                  "behaviors": [
                    "given different styles",
                    "AAA",
                    "when arrange, and assert(s) exist without act",
                    "`arrange` should be swapped out for `act`"
                  ],
                  "behavior": "given different styles, AAA, when arrange, and assert(s) exist without act, `arrange` should be swapped out for `act`",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3599733156",
              "assertions": [
                {
                  "id": "T3094947494",
                  "behaviors": [
                    "given different styles",
                    "BDD",
                    "when given, when, and then(s) exist",
                    "given should produce to when, which should produce to the assertions"
                  ],
                  "behavior": "given different styles, BDD, when given, when, and then(s) exist, given should produce to when, which should produce to the assertions",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3171417182",
              "assertions": [
                {
                  "id": "T2072171258",
                  "behaviors": [
                    "given different styles",
                    "BDD",
                    "when given, and then(s) exist without when",
                    "`given` should be swapped out for `when`"
                  ],
                  "behavior": "given different styles, BDD, when given, and then(s) exist without when, `given` should be swapped out for `when`",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1291623529",
              "assertions": [
                {
                  "id": "T3782690787",
                  "behaviors": [
                    "given different styles",
                    "vows",
                    "when topics are used for `when/act`",
                    "it should execute the topic"
                  ],
                  "behavior": "given different styles, vows, when topics are used for `when/act`, it should execute the topic",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B4254496363",
          "theories": [
            {
              "id": "B4254496363",
              "assertions": [
                {
                  "id": "T3183670899",
                  "behaviors": [
                    "chainability",
                    "when then is used as an `after` hook for tests (i.e. for cleanup)",
                    "it should run the after hook"
                  ],
                  "behavior": "chainability, when then is used as an `after` hook for tests (i.e. for cleanup), it should run the after hook",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3110062733",
              "assertions": [
                {
                  "id": "T2135440836",
                  "behaviors": [
                    "chainability",
                    "when then is used to run tests in a series",
                    "they should run in order"
                  ],
                  "behavior": "chainability, when then is used to run tests in a series, they should run in order",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B3547586930",
          "theories": [
            {
              "id": "B3547586930",
              "assertions": [
                {
                  "id": "T2283557910",
                  "behaviors": [
                    "test configuration",
                    "when a test sets a timeout",
                    "the test should be reported as BROKEN"
                  ],
                  "behavior": "test configuration, when a test sets a timeout, the test should be reported as BROKEN",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3247799586",
              "assertions": [
                {
                  "id": "T2439160698",
                  "behaviors": [
                    "test configuration",
                    "when a test sets a timeout",
                    "and another node overrides it",
                    "it should use the configured timeout"
                  ],
                  "behavior": "test configuration, when a test sets a timeout, and another node overrides it, it should use the configured timeout",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3123693836",
              "assertions": [
                {
                  "id": "T523737698",
                  "behaviors": [
                    "test configuration",
                    "when a test sets a timeout, with no description",
                    "the test should be reported as BROKEN"
                  ],
                  "behavior": "test configuration, when a test sets a timeout, with no description, the test should be reported as BROKEN",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2476209430",
              "assertions": [
                {
                  "id": "T3181904741",
                  "behaviors": [
                    "test configuration",
                    "when a test sets the assertion library",
                    "it should use the configured assertion library"
                  ],
                  "behavior": "test configuration, when a test sets the assertion library, it should use the configured assertion library",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B853865684",
          "theories": [
            {
              "id": "B853865684",
              "assertions": [
                {
                  "id": "T2615220919",
                  "behaviors": [
                    "assertion output",
                    "when an assertion passes, and returns an object with a `context` property",
                    "it should include the context in the event"
                  ],
                  "behavior": "assertion output, when an assertion passes, and returns an object with a `context` property, it should include the context in the event",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B753131583",
              "assertions": [
                {
                  "id": "T1282916600",
                  "behaviors": [
                    "assertion output",
                    "when an assertion passes, and returns a Promise with a `context` property",
                    "it should include the context in the event"
                  ],
                  "behavior": "assertion output, when an assertion passes, and returns a Promise with a `context` property, it should include the context in the event",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B2255567776",
          "theories": [
            {
              "id": "B2255567776",
              "assertions": [
                {
                  "id": "T3386406585",
                  "behaviors": [
                    "// when using supposed with mocha tests"
                  ],
                  "behavior": "when using supposed with mocha tests",
                  "skipped": true
                }
              ],
              "skipped": true
            }
          ]
        },
        {
          "batchId": "B1588313070",
          "theories": [
            {
              "id": "B1588313070",
              "assertions": [
                {
                  "id": "T2336706472",
                  "behaviors": [
                    "errors",
                    "when the `given` throws an error",
                    "it should bail out"
                  ],
                  "behavior": "errors, when the `given` throws an error, it should bail out",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1647302755",
              "assertions": [
                {
                  "id": "T482193410",
                  "behaviors": [
                    "errors",
                    "when the `when` throws an error",
                    "it should pass the error to the assertions"
                  ],
                  "behavior": "errors, when the `when` throws an error, it should pass the error to the assertions",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3434605673",
              "assertions": [
                {
                  "id": "T2547240914",
                  "behaviors": [
                    "errors",
                    "when the `given` rejects",
                    "it should bail out"
                  ],
                  "behavior": "errors, when the `given` rejects, it should bail out",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B4012798136",
              "assertions": [
                {
                  "id": "T3062352938",
                  "behaviors": [
                    "errors",
                    "when the `when` rejects",
                    "it should pass the error to the assertions"
                  ],
                  "behavior": "errors, when the `when` rejects, it should pass the error to the assertions",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2063895013",
              "assertions": [
                {
                  "id": "T1788022703",
                  "behaviors": [
                    "errors",
                    "when the assertion throws an error",
                    "the test should fail"
                  ],
                  "behavior": "errors, when the assertion throws an error, the test should fail",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B649031364",
              "assertions": [
                {
                  "id": "T1840921739",
                  "behaviors": [
                    "errors",
                    "when `given` is never resolved",
                    "the test should be reported as BROKEN"
                  ],
                  "behavior": "errors, when `given` is never resolved, the test should be reported as BROKEN",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3095591155",
              "assertions": [
                {
                  "id": "T3701701087",
                  "behaviors": [
                    "errors",
                    "when `when` is never resolved",
                    "the test should be reported as BROKEN"
                  ],
                  "behavior": "errors, when `when` is never resolved, the test should be reported as BROKEN",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B817700825",
              "assertions": [
                {
                  "id": "T2351029604",
                  "behaviors": [
                    "errors",
                    "when async assertions never return",
                    "the test should be reported as BROKEN"
                  ],
                  "behavior": "errors, when async assertions never return, the test should be reported as BROKEN",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B4174502233",
              "assertions": [
                {
                  "id": "T2074324936",
                  "behaviors": [
                    "errors",
                    "when promised assertions never return",
                    "the test should be reported as BROKEN"
                  ],
                  "behavior": "errors, when promised assertions never return, the test should be reported as BROKEN",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B3826980467",
          "theories": [
            {
              "id": "B3826980467",
              "assertions": [
                {
                  "id": "T496768875",
                  "behaviors": [
                    "supposed",
                    "when descriptions are deeply nested",
                    "it should run them all"
                  ],
                  "behavior": "supposed, when descriptions are deeply nested, it should run them all",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1173576165",
              "assertions": [
                {
                  "id": "T4101655569",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no when",
                    "and a parent description does have a when",
                    "it should use the parent when"
                  ],
                  "behavior": "supposed, when nested assertions have no when, and a parent description does have a when, it should use the parent when",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B4076317168",
              "assertions": [
                {
                  "id": "T4195653468",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no given",
                    "and a parent description does have a given",
                    "and the nest has a when",
                    "it should support branching the rabbit hole"
                  ],
                  "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest has a when, it should support branching the rabbit hole",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1931949118",
              "assertions": [
                {
                  "id": "T548857253",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no given",
                    "and a parent description does have a given",
                    "and the nest has a when",
                    "and there's more nesting",
                    "with when's but not given's",
                    "the when's should receive the value from the parent given"
                  ],
                  "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest has a when, and there's more nesting, with when's but not given's, the when's should receive the value from the parent given",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2334897915",
              "assertions": [
                {
                  "id": "T54769290",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no given",
                    "and a parent description does have a given",
                    "and the nest has a when",
                    "and there's more nesting",
                    "with when's and given's",
                    "the when's should receive the value from the overriding given"
                  ],
                  "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest has a when, and there's more nesting, with when's and given's, the when's should receive the value from the overriding given",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3062399233",
              "assertions": [
                {
                  "id": "T2582326040",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no given",
                    "and a parent description does have a given",
                    "and the nest has a when",
                    "and there's more nesting",
                    "with when's and given's",
                    "in deeper nests",
                    "the when's should receive the value from the overriding given"
                  ],
                  "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest has a when, and there's more nesting, with when's and given's, in deeper nests, the when's should receive the value from the overriding given",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1967741965",
              "assertions": [
                {
                  "id": "T647198938",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no given",
                    "and a parent description does have a given",
                    "and the nest does NOT have a when",
                    "the assertions should receive the value from the parent given"
                  ],
                  "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest does NOT have a when, the assertions should receive the value from the parent given",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2967556002",
              "assertions": [
                {
                  "id": "T3050652413",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no given",
                    "and a parent description does have a given",
                    "and the nest does NOT have a when",
                    "and there's more nesting",
                    "with neither when's nor given's",
                    "the assertions should receive the value from the parent given"
                  ],
                  "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest does NOT have a when, and there's more nesting, with neither when's nor given's, the assertions should receive the value from the parent given",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2744184832",
              "assertions": [
                {
                  "id": "T67986680",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no given",
                    "and a parent description does have a given",
                    "and the nest does NOT have a when",
                    "and there's more nesting",
                    "with a given, but not a when",
                    "the assertions should receive the value from the overriding given"
                  ],
                  "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest does NOT have a when, and there's more nesting, with a given, but not a when, the assertions should receive the value from the overriding given",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3062399233",
              "assertions": [
                {
                  "id": "T3994234473",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have no given",
                    "and a parent description does have a given",
                    "and the nest does NOT have a when",
                    "and there's more nesting",
                    "with a given, but not a when",
                    "in deeper nests",
                    "the assertions should receive the value from the overriding given"
                  ],
                  "behavior": "supposed, when nested assertions have no given, and a parent description does have a given, and the nest does NOT have a when, and there's more nesting, with a given, but not a when, in deeper nests, the assertions should receive the value from the overriding given",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3391635544",
              "assertions": [
                {
                  "id": "T1489044925",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have givens",
                    "and they stem from a parent with a when (1)",
                    "it should pass the child given to the parent when"
                  ],
                  "behavior": "supposed, when nested assertions have givens, and they stem from a parent with a when (1), it should pass the child given to the parent when",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1754119825",
              "assertions": [
                {
                  "id": "T3019135220",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have givens",
                    "and they stem from a parent with a when (42)",
                    "it should pass the child given to the parent when"
                  ],
                  "behavior": "supposed, when nested assertions have givens, and they stem from a parent with a when (42), it should pass the child given to the parent when",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B1660635968",
              "assertions": [
                {
                  "id": "T3627335037",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have givens (make-batch if (!when && parentWhen && !whenIsInheritedGiven))",
                    "it should equal 84"
                  ],
                  "behavior": "supposed, when nested assertions have givens (make-batch if (!when && parentWhen && !whenIsInheritedGiven)), it should equal 84",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2605023908",
              "assertions": [
                {
                  "id": "T3508928479",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have givens (make-batch if (!when && parentWhen && !whenIsInheritedGiven))",
                    "and they stem from a parent with a when",
                    "it should equal 2"
                  ],
                  "behavior": "supposed, when nested assertions have givens (make-batch if (!when && parentWhen && !whenIsInheritedGiven)), and they stem from a parent with a when, it should equal 2",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B4214814236",
              "assertions": [
                {
                  "id": "T335109675",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have givens (make-batch if (!when && given))",
                    "it should equal 42"
                  ],
                  "behavior": "supposed, when nested assertions have givens (make-batch if (!when && given)), it should equal 42",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2605023908",
              "assertions": [
                {
                  "id": "T3699574721",
                  "behaviors": [
                    "supposed",
                    "when nested assertions have givens (make-batch if (!when && given))",
                    "and they stem from a parent with a when",
                    "it should equal 1"
                  ],
                  "behavior": "supposed, when nested assertions have givens (make-batch if (!when && given)), and they stem from a parent with a when, it should equal 1",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B2237625854",
              "assertions": [
                {
                  "id": "T643190769",
                  "behaviors": [
                    "supposed",
                    "when the `when` is asynchronous",
                    "it should not execute the assertions until the when is resolved"
                  ],
                  "behavior": "supposed, when the `when` is asynchronous, it should not execute the assertions until the when is resolved",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B922081056",
          "theories": [
            {
              "id": "B922081056",
              "assertions": [
                {
                  "id": "T411392620",
                  "behaviors": [
                    "assertion output",
                    "when an assertion passes, and returns an object with a `log` property",
                    "it should include the log in the event"
                  ],
                  "behavior": "assertion output, when an assertion passes, and returns an object with a `log` property, it should include the log in the event",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B962456471",
              "assertions": [
                {
                  "id": "T3705649512",
                  "behaviors": [
                    "assertion output",
                    "when an assertion passes, and returns a Promise with a `log` property",
                    "it should include the log in the event"
                  ],
                  "behavior": "assertion output, when an assertion passes, and returns a Promise with a `log` property, it should include the log in the event",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B1675426431",
          "theories": [
            {
              "id": "B1675426431",
              "assertions": [
                {
                  "id": "T754121129",
                  "behaviors": [
                    "missing when",
                    "when there is no when function",
                    "it should still execute the assertions"
                  ],
                  "behavior": "missing when, when there is no when function, it should still execute the assertions",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B2554623017",
          "theories": [
            {
              "id": "B2554623017",
              "assertions": [
                {
                  "id": "T206888825",
                  "behaviors": [
                    "skipping tests",
                    "when a behavior is skipped",
                    "it should NOT run the behavior"
                  ],
                  "behavior": "skipping tests, when a behavior is skipped, it should NOT run the behavior",
                  "skipped": false
                },
                {
                  "id": "T3410282755",
                  "behaviors": [
                    "skipping tests",
                    "when a behavior is skipped",
                    "it should NOT run any assertions"
                  ],
                  "behavior": "skipping tests, when a behavior is skipped, it should NOT run any assertions",
                  "skipped": false
                },
                {
                  "id": "T2221856548",
                  "behaviors": [
                    "skipping tests",
                    "when a behavior is skipped",
                    "it should count the assertions that were skipped"
                  ],
                  "behavior": "skipping tests, when a behavior is skipped, it should count the assertions that were skipped",
                  "skipped": false
                },
                {
                  "id": "T3722697963",
                  "behaviors": [
                    "skipping tests",
                    "when a behavior is skipped",
                    "it should produce outcomes with a status of SKIPPED"
                  ],
                  "behavior": "skipping tests, when a behavior is skipped, it should produce outcomes with a status of SKIPPED",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3045445995",
              "assertions": [
                {
                  "id": "T632654725",
                  "behaviors": [
                    "skipping tests",
                    "when a named behavior is skipped",
                    "it should NOT run the behavior"
                  ],
                  "behavior": "skipping tests, when a named behavior is skipped, it should NOT run the behavior",
                  "skipped": false
                },
                {
                  "id": "T242631415",
                  "behaviors": [
                    "skipping tests",
                    "when a named behavior is skipped",
                    "it should NOT run any assertions"
                  ],
                  "behavior": "skipping tests, when a named behavior is skipped, it should NOT run any assertions",
                  "skipped": false
                },
                {
                  "id": "T2116234970",
                  "behaviors": [
                    "skipping tests",
                    "when a named behavior is skipped",
                    "it should count the assertions that were skipped"
                  ],
                  "behavior": "skipping tests, when a named behavior is skipped, it should count the assertions that were skipped",
                  "skipped": false
                },
                {
                  "id": "T3686174769",
                  "behaviors": [
                    "skipping tests",
                    "when a named behavior is skipped",
                    "it should produce outcomes with a status of SKIPPED"
                  ],
                  "behavior": "skipping tests, when a named behavior is skipped, it should produce outcomes with a status of SKIPPED",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B292274576",
              "assertions": [
                {
                  "id": "T3626082049",
                  "behaviors": [
                    "skipping tests",
                    "when an assertion is skipped",
                    "it should run the behavior"
                  ],
                  "behavior": "skipping tests, when an assertion is skipped, it should run the behavior",
                  "skipped": false
                },
                {
                  "id": "T547674825",
                  "behaviors": [
                    "skipping tests",
                    "when an assertion is skipped",
                    "it should run the other assertions"
                  ],
                  "behavior": "skipping tests, when an assertion is skipped, it should run the other assertions",
                  "skipped": false
                },
                {
                  "id": "T234758359",
                  "behaviors": [
                    "skipping tests",
                    "when an assertion is skipped",
                    "it should NOT run the skipped assertion"
                  ],
                  "behavior": "skipping tests, when an assertion is skipped, it should NOT run the skipped assertion",
                  "skipped": false
                },
                {
                  "id": "T816738356",
                  "behaviors": [
                    "skipping tests",
                    "when an assertion is skipped",
                    "it should count the assertions that were skipped"
                  ],
                  "behavior": "skipping tests, when an assertion is skipped, it should count the assertions that were skipped",
                  "skipped": false
                },
                {
                  "id": "T2928585722",
                  "behaviors": [
                    "skipping tests",
                    "when an assertion is skipped",
                    "it should produce outcomes with a status of SKIPPED"
                  ],
                  "behavior": "skipping tests, when an assertion is skipped, it should produce outcomes with a status of SKIPPED",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3062248590",
              "assertions": [
                {
                  "id": "T3145459613",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's SKIP directive",
                    "it should run the behavior"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's SKIP directive, it should run the behavior",
                  "skipped": false
                },
                {
                  "id": "T1142213017",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's SKIP directive",
                    "it should run the other assertions"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's SKIP directive, it should run the other assertions",
                  "skipped": false
                },
                {
                  "id": "T817066554",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's SKIP directive",
                    "it should NOT run the skipped assertion"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's SKIP directive, it should NOT run the skipped assertion",
                  "skipped": false
                },
                {
                  "id": "T590818120",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's SKIP directive",
                    "it should count the assertions that were skipped"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's SKIP directive, it should count the assertions that were skipped",
                  "skipped": false
                },
                {
                  "id": "T2578327884",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's SKIP directive",
                    "it should produce outcomes with a status of SKIPPED"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's SKIP directive, it should produce outcomes with a status of SKIPPED",
                  "skipped": false
                }
              ],
              "skipped": false
            },
            {
              "id": "B3267492567",
              "assertions": [
                {
                  "id": "T3300348428",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's TODO directive",
                    "it should run the behavior"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's TODO directive, it should run the behavior",
                  "skipped": false
                },
                {
                  "id": "T4151420164",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's TODO directive",
                    "it should run the other assertions"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's TODO directive, it should run the other assertions",
                  "skipped": false
                },
                {
                  "id": "T271535009",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's TODO directive",
                    "it should NOT run the skipped assertion"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's TODO directive, it should NOT run the skipped assertion",
                  "skipped": false
                },
                {
                  "id": "T2482641236",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's TODO directive",
                    "it should count the assertions that were skipped"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's TODO directive, it should count the assertions that were skipped",
                  "skipped": false
                },
                {
                  "id": "T1381204779",
                  "behaviors": [
                    "skipping tests",
                    "when a test is skipped using TAP's TODO directive",
                    "it should produce outcomes with a status of SKIPPED"
                  ],
                  "behavior": "skipping tests, when a test is skipped using TAP's TODO directive, it should produce outcomes with a status of SKIPPED",
                  "skipped": false
                }
              ],
              "skipped": false
            }
          ]
        },
        {
          "batchId": "B3106365075",
          "theories": [
            {
              "id": "B3106365075",
              "assertions": [
                {
                  "id": "T1579980829",
                  "behaviors": [
                    "slow test 0",
                    "it should be delayed"
                  ],
                  "behavior": "slow test 0, it should be delayed",
                  "skipped": false
                }
              ],
              "skipped": false,
              "timeout": 2000
            }
          ]
        },
        {
          "batchId": "B1160732269",
          "theories": [
            {
              "id": "B1160732269",
              "assertions": [
                {
                  "id": "T2651701043",
                  "behaviors": [
                    "slow test 1",
                    "it should be delayed"
                  ],
                  "behavior": "slow test 1, it should be delayed",
                  "skipped": false
                }
              ],
              "skipped": false,
              "timeout": 2000
            }
          ]
        },
        {
          "batchId": "B3897443046",
          "theories": [
            {
              "id": "B3897443046",
              "assertions": [
                {
                  "id": "T1607347637",
                  "behaviors": [
                    "slow test 2",
                    "it should be delayed"
                  ],
                  "behavior": "slow test 2, it should be delayed",
                  "skipped": false
                }
              ],
              "skipped": false,
              "timeout": 2000
            }
          ]
        },
        {
          "batchId": "B1734145665",
          "theories": [
            {
              "id": "B1734145665",
              "assertions": [
                {
                  "id": "T1552166806",
                  "behaviors": [
                    "slow test 3",
                    "it should be delayed"
                  ],
                  "behavior": "slow test 3, it should be delayed",
                  "skipped": false
                }
              ],
              "skipped": false,
              "timeout": 2000
            }
          ]
        },
        {
          "batchId": "B2703165877",
          "theories": [
            {
              "id": "B2703165877",
              "assertions": [
                {
                  "id": "T1349720967",
                  "behaviors": [
                    "slow test 4",
                    "it should be delayed"
                  ],
                  "behavior": "slow test 4, it should be delayed",
                  "skipped": false
                }
              ],
              "skipped": false,
              "timeout": 2000
            }
          ]
        }
      ],
      "order": [
        "T234613271",
        "T2979873516",
        "T1762544061",
        "T2111249353",
        "T2009783305",
        "T872280371",
        "T3108099732",
        "T272289404",
        "T1935099767",
        "T3986766525",
        "T1666834789",
        "T3601344453",
        "T3832517023",
        "T3858743262",
        "T833920087",
        "T3574369160",
        "T2339922183",
        "T1305431340",
        "T2076592319",
        "T4198641560",
        "T3199713793",
        "T2583312209",
        "T3856250700",
        "T781209833",
        "T1876945275",
        "T234034953",
        "T4097946667",
        "T3428553742",
        "T1948043456",
        "T4055811011",
        "T2758195184",
        "T286230725",
        "T1192774473",
        "T1487094483",
        "T1581490773",
        "T3746640873",
        "T2869232150",
        "T3094947494",
        "T2072171258",
        "T3782690787",
        "T3183670899",
        "T2135440836",
        "T2283557910",
        "T2439160698",
        "T523737698",
        "T3181904741",
        "T2615220919",
        "T1282916600",
        "T3386406585",
        "T2336706472",
        "T482193410",
        "T2547240914",
        "T3062352938",
        "T1788022703",
        "T1840921739",
        "T3701701087",
        "T2351029604",
        "T2074324936",
        "T496768875",
        "T4101655569",
        "T4195653468",
        "T548857253",
        "T54769290",
        "T2582326040",
        "T647198938",
        "T3050652413",
        "T67986680",
        "T3994234473",
        "T1489044925",
        "T3019135220",
        "T3627335037",
        "T3508928479",
        "T335109675",
        "T3699574721",
        "T643190769",
        "T411392620",
        "T3705649512",
        "T754121129",
        "T206888825",
        "T3410282755",
        "T2221856548",
        "T3722697963",
        "T632654725",
        "T242631415",
        "T2116234970",
        "T3686174769",
        "T3626082049",
        "T547674825",
        "T234758359",
        "T816738356",
        "T2928585722",
        "T3145459613",
        "T1142213017",
        "T817066554",
        "T590818120",
        "T2578327884",
        "T3300348428",
        "T4151420164",
        "T271535009",
        "T2482641236",
        "T1381204779",
        "T1579980829",
        "T2651701043",
        "T1607347637",
        "T1552166806",
        "T1349720967"
      ]
    },
    "totals": {
      "total": 106,
      "passed": 104,
      "skipped": 2,
      "failed": 0,
      "broken": 0,
      "startTime": 416963739240.038,
      "endTime": 416963819451.684,
      "duration": {
        "seconds": 0.08021164599609375,
        "milliseconds": 80.21164599609375,
        "microseconds": 80211.64599609375,
        "nanoseconds": 80211645.99609375
      }
    }
  }
}]
